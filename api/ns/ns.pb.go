// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ns.proto

package ns

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_brocaar_loraserver_api_types "github.com/brocaar/loraserver/api/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RXWindow int32

const (
	// Receive window 1
	RXWindow_RX1 RXWindow = 0
	// Receive window 2
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) { return fileDescriptorNs, []int{0} }

type Modulation int32

const (
	// LoRa
	Modulation_LORA Modulation = 0
	// FSK
	Modulation_FSK Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptorNs, []int{1} }

type Region int32

const (
	// EU868
	Region_EU868 Region = 0
	// US915
	Region_US915 Region = 2
	// CN779
	Region_CN779 Region = 3
	// EU433
	Region_EU433 Region = 4
	// AU915
	Region_AU915 Region = 5
	// CN470
	Region_CN470 Region = 6
	// AS923
	Region_AS923 Region = 7
	// KR920
	Region_KR920 Region = 8
	// IN865
	Region_IN865 Region = 9
	// RU864
	Region_RU864 Region = 10
)

var Region_name = map[int32]string{
	0:  "EU868",
	2:  "US915",
	3:  "CN779",
	4:  "EU433",
	5:  "AU915",
	6:  "CN470",
	7:  "AS923",
	8:  "KR920",
	9:  "IN865",
	10: "RU864",
}
var Region_value = map[string]int32{
	"EU868": 0,
	"US915": 2,
	"CN779": 3,
	"EU433": 4,
	"AU915": 5,
	"CN470": 6,
	"AS923": 7,
	"KR920": 8,
	"IN865": 9,
	"RU864": 10,
}

func (x Region) String() string {
	return proto.EnumName(Region_name, int32(x))
}
func (Region) EnumDescriptor() ([]byte, []int) { return fileDescriptorNs, []int{2} }

type AggregationInterval int32

const (
	AggregationInterval_SECOND  AggregationInterval = 0
	AggregationInterval_MINUTE  AggregationInterval = 1
	AggregationInterval_HOUR    AggregationInterval = 2
	AggregationInterval_DAY     AggregationInterval = 3
	AggregationInterval_WEEK    AggregationInterval = 4
	AggregationInterval_MONTH   AggregationInterval = 5
	AggregationInterval_QUARTER AggregationInterval = 6
	AggregationInterval_YEAR    AggregationInterval = 7
)

var AggregationInterval_name = map[int32]string{
	0: "SECOND",
	1: "MINUTE",
	2: "HOUR",
	3: "DAY",
	4: "WEEK",
	5: "MONTH",
	6: "QUARTER",
	7: "YEAR",
}
var AggregationInterval_value = map[string]int32{
	"SECOND":  0,
	"MINUTE":  1,
	"HOUR":    2,
	"DAY":     3,
	"WEEK":    4,
	"MONTH":   5,
	"QUARTER": 6,
	"YEAR":    7,
}

func (x AggregationInterval) String() string {
	return proto.EnumName(AggregationInterval_name, int32(x))
}
func (AggregationInterval) EnumDescriptor() ([]byte, []int) { return fileDescriptorNs, []int{3} }

type CreateServiceProfileRequest struct {
	// Service-profile object to create.
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=service_profile,json=serviceProfile" json:"service_profile,omitempty"`
}

func (m *CreateServiceProfileRequest) Reset()                    { *m = CreateServiceProfileRequest{} }
func (m *CreateServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceProfileRequest) ProtoMessage()               {}
func (*CreateServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{0} }

func (m *CreateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

type CreateServiceProfileResponse struct {
	// ID of the created service-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *CreateServiceProfileResponse) Reset()                    { *m = CreateServiceProfileResponse{} }
func (m *CreateServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceProfileResponse) ProtoMessage()               {}
func (*CreateServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{1} }

type GetServiceProfileRequest struct {
	// ID of the service-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *GetServiceProfileRequest) Reset()                    { *m = GetServiceProfileRequest{} }
func (m *GetServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceProfileRequest) ProtoMessage()               {}
func (*GetServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{2} }

type GetServiceProfileResponse struct {
	// Service-profile object.
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=service_profile,json=serviceProfile" json:"service_profile,omitempty"`
	// Created at timestamp.
	CreatedAtUnixNS int64 `protobuf:"varint,2,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	// Last update timestamp.
	UpdatedAtUnixNS int64 `protobuf:"varint,3,opt,name=updated_at_unix_ns,json=updatedAtUnixNs,proto3" json:"updated_at_unix_ns,omitempty"`
}

func (m *GetServiceProfileResponse) Reset()                    { *m = GetServiceProfileResponse{} }
func (m *GetServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServiceProfileResponse) ProtoMessage()               {}
func (*GetServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{3} }

func (m *GetServiceProfileResponse) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

func (m *GetServiceProfileResponse) GetCreatedAtUnixNS() int64 {
	if m != nil {
		return m.CreatedAtUnixNS
	}
	return 0
}

func (m *GetServiceProfileResponse) GetUpdatedAtUnixNS() int64 {
	if m != nil {
		return m.UpdatedAtUnixNS
	}
	return 0
}

type UpdateServiceProfileRequest struct {
	// Service-profile object to update.
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=service_profile,json=serviceProfile" json:"service_profile,omitempty"`
}

func (m *UpdateServiceProfileRequest) Reset()                    { *m = UpdateServiceProfileRequest{} }
func (m *UpdateServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceProfileRequest) ProtoMessage()               {}
func (*UpdateServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{4} }

func (m *UpdateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

type UpdateServiceProfileResponse struct {
}

func (m *UpdateServiceProfileResponse) Reset()                    { *m = UpdateServiceProfileResponse{} }
func (m *UpdateServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceProfileResponse) ProtoMessage()               {}
func (*UpdateServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{5} }

type DeleteServiceProfileRequest struct {
	// ID of the service-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *DeleteServiceProfileRequest) Reset()                    { *m = DeleteServiceProfileRequest{} }
func (m *DeleteServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceProfileRequest) ProtoMessage()               {}
func (*DeleteServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{6} }

type DeleteServiceProfileResponse struct {
}

func (m *DeleteServiceProfileResponse) Reset()                    { *m = DeleteServiceProfileResponse{} }
func (m *DeleteServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceProfileResponse) ProtoMessage()               {}
func (*DeleteServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{7} }

type CreateRoutingProfileRequest struct {
	// Routing-profile object to create.
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routing_profile,json=routingProfile" json:"routing_profile,omitempty"`
}

func (m *CreateRoutingProfileRequest) Reset()                    { *m = CreateRoutingProfileRequest{} }
func (m *CreateRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoutingProfileRequest) ProtoMessage()               {}
func (*CreateRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{8} }

func (m *CreateRoutingProfileRequest) GetRoutingProfile() *RoutingProfile {
	if m != nil {
		return m.RoutingProfile
	}
	return nil
}

type CreateRoutingProfileResponse struct {
	// ID of the created routing-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *CreateRoutingProfileResponse) Reset()                    { *m = CreateRoutingProfileResponse{} }
func (m *CreateRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRoutingProfileResponse) ProtoMessage()               {}
func (*CreateRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{9} }

type GetRoutingProfileRequest struct {
	// ID of the routing-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *GetRoutingProfileRequest) Reset()                    { *m = GetRoutingProfileRequest{} }
func (m *GetRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoutingProfileRequest) ProtoMessage()               {}
func (*GetRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{10} }

type GetRoutingProfileResponse struct {
	// Routing-profile object.
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routing_profile,json=routingProfile" json:"routing_profile,omitempty"`
	// Created at timestamp.
	CreatedAtUnixNS int64 `protobuf:"varint,2,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	// Last update timestamp.
	UpdatedAtUnixNS int64 `protobuf:"varint,3,opt,name=updated_at_unix_ns,json=updatedAtUnixNs,proto3" json:"updated_at_unix_ns,omitempty"`
}

func (m *GetRoutingProfileResponse) Reset()                    { *m = GetRoutingProfileResponse{} }
func (m *GetRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRoutingProfileResponse) ProtoMessage()               {}
func (*GetRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{11} }

func (m *GetRoutingProfileResponse) GetRoutingProfile() *RoutingProfile {
	if m != nil {
		return m.RoutingProfile
	}
	return nil
}

func (m *GetRoutingProfileResponse) GetCreatedAtUnixNS() int64 {
	if m != nil {
		return m.CreatedAtUnixNS
	}
	return 0
}

func (m *GetRoutingProfileResponse) GetUpdatedAtUnixNS() int64 {
	if m != nil {
		return m.UpdatedAtUnixNS
	}
	return 0
}

type UpdateRoutingProfileRequest struct {
	// Routing-profile object to update.
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routing_profile,json=routingProfile" json:"routing_profile,omitempty"`
}

func (m *UpdateRoutingProfileRequest) Reset()                    { *m = UpdateRoutingProfileRequest{} }
func (m *UpdateRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoutingProfileRequest) ProtoMessage()               {}
func (*UpdateRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{12} }

func (m *UpdateRoutingProfileRequest) GetRoutingProfile() *RoutingProfile {
	if m != nil {
		return m.RoutingProfile
	}
	return nil
}

type UpdateRoutingProfileResponse struct {
}

func (m *UpdateRoutingProfileResponse) Reset()                    { *m = UpdateRoutingProfileResponse{} }
func (m *UpdateRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoutingProfileResponse) ProtoMessage()               {}
func (*UpdateRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{13} }

type DeleteRoutingProfileRequest struct {
	// Routing-profile ID.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *DeleteRoutingProfileRequest) Reset()                    { *m = DeleteRoutingProfileRequest{} }
func (m *DeleteRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoutingProfileRequest) ProtoMessage()               {}
func (*DeleteRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{14} }

type DeleteRoutingProfileResponse struct {
}

func (m *DeleteRoutingProfileResponse) Reset()                    { *m = DeleteRoutingProfileResponse{} }
func (m *DeleteRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoutingProfileResponse) ProtoMessage()               {}
func (*DeleteRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{15} }

type CreateDeviceProfileRequest struct {
	// Device-profile object to create.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile" json:"device_profile,omitempty"`
}

func (m *CreateDeviceProfileRequest) Reset()                    { *m = CreateDeviceProfileRequest{} }
func (m *CreateDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceProfileRequest) ProtoMessage()               {}
func (*CreateDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{16} }

func (m *CreateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if m != nil {
		return m.DeviceProfile
	}
	return nil
}

type CreateDeviceProfileResponse struct {
	// ID of the created device-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *CreateDeviceProfileResponse) Reset()                    { *m = CreateDeviceProfileResponse{} }
func (m *CreateDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceProfileResponse) ProtoMessage()               {}
func (*CreateDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{17} }

type GetDeviceProfileRequest struct {
	// Device-profile ID.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *GetDeviceProfileRequest) Reset()                    { *m = GetDeviceProfileRequest{} }
func (m *GetDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceProfileRequest) ProtoMessage()               {}
func (*GetDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{18} }

type GetDeviceProfileResponse struct {
	// Device-profile object.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile" json:"device_profile,omitempty"`
	// Created at timestamp.
	CreatedAtUnixNS int64 `protobuf:"varint,2,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	// Last update timestamp.
	UpdatedAtUnixNS int64 `protobuf:"varint,3,opt,name=updated_at_unix_ns,json=updatedAtUnixNs,proto3" json:"updated_at_unix_ns,omitempty"`
}

func (m *GetDeviceProfileResponse) Reset()                    { *m = GetDeviceProfileResponse{} }
func (m *GetDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceProfileResponse) ProtoMessage()               {}
func (*GetDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{19} }

func (m *GetDeviceProfileResponse) GetDeviceProfile() *DeviceProfile {
	if m != nil {
		return m.DeviceProfile
	}
	return nil
}

func (m *GetDeviceProfileResponse) GetCreatedAtUnixNS() int64 {
	if m != nil {
		return m.CreatedAtUnixNS
	}
	return 0
}

func (m *GetDeviceProfileResponse) GetUpdatedAtUnixNS() int64 {
	if m != nil {
		return m.UpdatedAtUnixNS
	}
	return 0
}

type UpdateDeviceProfileRequest struct {
	// Device-profile object to update.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile" json:"device_profile,omitempty"`
}

func (m *UpdateDeviceProfileRequest) Reset()                    { *m = UpdateDeviceProfileRequest{} }
func (m *UpdateDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceProfileRequest) ProtoMessage()               {}
func (*UpdateDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{20} }

func (m *UpdateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if m != nil {
		return m.DeviceProfile
	}
	return nil
}

type UpdateDeviceProfileResponse struct {
}

func (m *UpdateDeviceProfileResponse) Reset()                    { *m = UpdateDeviceProfileResponse{} }
func (m *UpdateDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceProfileResponse) ProtoMessage()               {}
func (*UpdateDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{21} }

type DeleteDeviceProfileRequest struct {
	// Device-profile ID.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *DeleteDeviceProfileRequest) Reset()                    { *m = DeleteDeviceProfileRequest{} }
func (m *DeleteDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceProfileRequest) ProtoMessage()               {}
func (*DeleteDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{22} }

type DeleteDeviceProfileResponse struct {
}

func (m *DeleteDeviceProfileResponse) Reset()                    { *m = DeleteDeviceProfileResponse{} }
func (m *DeleteDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceProfileResponse) ProtoMessage()               {}
func (*DeleteDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{23} }

type Device struct {
	// DevEUI.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
	// Device-profile ID.
	DeviceProfileID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,2,opt,name=device_profile_id,json=deviceProfileId,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"device_profile_id"`
	// Service-profile ID.
	ServiceProfileID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,3,opt,name=service_profile_id,json=serviceProfileId,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"service_profile_id"`
	// Routing-profile ID.
	RoutingProfileID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,4,opt,name=routing_profile_id,json=routingProfileId,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"routing_profile_id"`
	// Skip frame-counter check.
	// Note that turning this on is insecure and is intended for debugging only.
	SkipFCntCheck bool `protobuf:"varint,5,opt,name=skip_f_cnt_check,json=skipFCntCheck,proto3" json:"skip_f_cnt_check,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{24} }

func (m *Device) GetSkipFCntCheck() bool {
	if m != nil {
		return m.SkipFCntCheck
	}
	return false
}

type CreateDeviceRequest struct {
	// Device object to create.
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *CreateDeviceRequest) Reset()                    { *m = CreateDeviceRequest{} }
func (m *CreateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceRequest) ProtoMessage()               {}
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{25} }

func (m *CreateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type CreateDeviceResponse struct {
}

func (m *CreateDeviceResponse) Reset()                    { *m = CreateDeviceResponse{} }
func (m *CreateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceResponse) ProtoMessage()               {}
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{26} }

type GetDeviceRequest struct {
	// DevEUI.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{27} }

type GetDeviceResponse struct {
	// Device object.
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// Created at timestamp.
	CreatedAtUnixNS int64 `protobuf:"varint,2,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	// Last update timestamp.
	UpdatedAtUnixNS int64 `protobuf:"varint,3,opt,name=updated_at_unix_ns,json=updatedAtUnixNs,proto3" json:"updated_at_unix_ns,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{28} }

func (m *GetDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *GetDeviceResponse) GetCreatedAtUnixNS() int64 {
	if m != nil {
		return m.CreatedAtUnixNS
	}
	return 0
}

func (m *GetDeviceResponse) GetUpdatedAtUnixNS() int64 {
	if m != nil {
		return m.UpdatedAtUnixNS
	}
	return 0
}

type UpdateDeviceRequest struct {
	// Device object to update.
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{29} }

func (m *UpdateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UpdateDeviceResponse struct {
}

func (m *UpdateDeviceResponse) Reset()                    { *m = UpdateDeviceResponse{} }
func (m *UpdateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceResponse) ProtoMessage()               {}
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{30} }

type DeleteDeviceRequest struct {
	// DevEUI.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *DeleteDeviceRequest) Reset()                    { *m = DeleteDeviceRequest{} }
func (m *DeleteDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceRequest) ProtoMessage()               {}
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{31} }

type DeleteDeviceResponse struct {
}

func (m *DeleteDeviceResponse) Reset()                    { *m = DeleteDeviceResponse{} }
func (m *DeleteDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceResponse) ProtoMessage()               {}
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{32} }

type DeviceActivation struct {
	// DevEUI.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
	// Device address (DevAddr).
	DevAddr github_com_brocaar_loraserver_api_types.DevAddr `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/brocaar/loraserver/api/types.DevAddr" json:"dev_addr"`
	// SNwkSIntKey (serving network-server session integrity key).
	SNwkSIntKey github_com_brocaar_loraserver_api_types.AES128Key `protobuf:"bytes,3,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3,customtype=github.com/brocaar/loraserver/api/types.AES128Key" json:"s_nwk_s_int_key"`
	// FNwkSIntKey (forwarding network-server session integrity key).
	FNwkSIntKey github_com_brocaar_loraserver_api_types.AES128Key `protobuf:"bytes,4,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3,customtype=github.com/brocaar/loraserver/api/types.AES128Key" json:"f_nwk_s_int_key"`
	// NwkSEncKey (network-server session encryption key).
	NwkSEncKey github_com_brocaar_loraserver_api_types.AES128Key `protobuf:"bytes,5,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3,customtype=github.com/brocaar/loraserver/api/types.AES128Key" json:"nwk_s_enc_key"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,6,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// The network frame-counter used for the next downlink frame.
	NFCntDown uint32 `protobuf:"varint,7,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	// The application frame-counter used for the next downlink frame (LoRaWAN 1.1).
	AFCntDown uint32 `protobuf:"varint,8,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
	// Skip frame-counter checks (this is insecure, but could be helpful for debugging).
	SkipFCntCheck bool `protobuf:"varint,9,opt,name=skip_f_cnt_check,json=skipFCntCheck,proto3" json:"skip_f_cnt_check,omitempty"`
}

func (m *DeviceActivation) Reset()                    { *m = DeviceActivation{} }
func (m *DeviceActivation) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivation) ProtoMessage()               {}
func (*DeviceActivation) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{33} }

func (m *DeviceActivation) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *DeviceActivation) GetNFCntDown() uint32 {
	if m != nil {
		return m.NFCntDown
	}
	return 0
}

func (m *DeviceActivation) GetAFCntDown() uint32 {
	if m != nil {
		return m.AFCntDown
	}
	return 0
}

func (m *DeviceActivation) GetSkipFCntCheck() bool {
	if m != nil {
		return m.SkipFCntCheck
	}
	return false
}

type ActivateDeviceRequest struct {
	// Device-activation to activate a device (ABP).
	DeviceActivation *DeviceActivation `protobuf:"bytes,1,opt,name=device_activation,json=deviceActivation" json:"device_activation,omitempty"`
}

func (m *ActivateDeviceRequest) Reset()                    { *m = ActivateDeviceRequest{} }
func (m *ActivateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateDeviceRequest) ProtoMessage()               {}
func (*ActivateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{34} }

func (m *ActivateDeviceRequest) GetDeviceActivation() *DeviceActivation {
	if m != nil {
		return m.DeviceActivation
	}
	return nil
}

type ActivateDeviceResponse struct {
}

func (m *ActivateDeviceResponse) Reset()                    { *m = ActivateDeviceResponse{} }
func (m *ActivateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateDeviceResponse) ProtoMessage()               {}
func (*ActivateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{35} }

type DeactivateDeviceRequest struct {
	// Device EUI (8 bytes).
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *DeactivateDeviceRequest) Reset()                    { *m = DeactivateDeviceRequest{} }
func (m *DeactivateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeactivateDeviceRequest) ProtoMessage()               {}
func (*DeactivateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{36} }

type DeactivateDeviceResponse struct {
}

func (m *DeactivateDeviceResponse) Reset()                    { *m = DeactivateDeviceResponse{} }
func (m *DeactivateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeactivateDeviceResponse) ProtoMessage()               {}
func (*DeactivateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{37} }

type GetDeviceActivationRequest struct {
	// Device EUI (8 bytes).
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *GetDeviceActivationRequest) Reset()                    { *m = GetDeviceActivationRequest{} }
func (m *GetDeviceActivationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceActivationRequest) ProtoMessage()               {}
func (*GetDeviceActivationRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{38} }

type GetDeviceActivationResponse struct {
	// Device-activation object.
	DeviceActivation *DeviceActivation `protobuf:"bytes,1,opt,name=device_activation,json=deviceActivation" json:"device_activation,omitempty"`
}

func (m *GetDeviceActivationResponse) Reset()                    { *m = GetDeviceActivationResponse{} }
func (m *GetDeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceActivationResponse) ProtoMessage()               {}
func (*GetDeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{39} }

func (m *GetDeviceActivationResponse) GetDeviceActivation() *DeviceActivation {
	if m != nil {
		return m.DeviceActivation
	}
	return nil
}

type GetRandomDevAddrRequest struct {
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{40} }

type GetRandomDevAddrResponse struct {
	// Random device address (DevAddr).
	// Note that this includes the NetID prefix of the network-server.
	DevAddr github_com_brocaar_loraserver_api_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/brocaar/loraserver/api/types.DevAddr" json:"dev_addr"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{41} }

type CreateMACCommandQueueItemRequest struct {
	// DevEUI EUI (8 bytes).
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
	// Command identifier (specified by the LoRaWAN specs).
	Cid uint32 `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// MAC-command(s). In case multiple payloads are defined, then they
	// are always sent within a single frame.
	Commands [][]byte `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
}

func (m *CreateMACCommandQueueItemRequest) Reset()         { *m = CreateMACCommandQueueItemRequest{} }
func (m *CreateMACCommandQueueItemRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMACCommandQueueItemRequest) ProtoMessage()    {}
func (*CreateMACCommandQueueItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{42}
}

func (m *CreateMACCommandQueueItemRequest) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CreateMACCommandQueueItemRequest) GetCommands() [][]byte {
	if m != nil {
		return m.Commands
	}
	return nil
}

type CreateMACCommandQueueItemResponse struct {
}

func (m *CreateMACCommandQueueItemResponse) Reset()         { *m = CreateMACCommandQueueItemResponse{} }
func (m *CreateMACCommandQueueItemResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMACCommandQueueItemResponse) ProtoMessage()    {}
func (*CreateMACCommandQueueItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{43}
}

type SendProprietaryPayloadRequest struct {
	// MACPayload of the proprietary LoRaWAN frame.
	MacPayload []byte `protobuf:"bytes,1,opt,name=mac_payload,json=macPayload,proto3" json:"mac_payload,omitempty"`
	// MIC of the proprietary LoRaWAN frame (must be 4 bytes).
	Mic []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Gateway MAC address(es) to use for transmitting the LoRaWAN frame.
	GatewayMacs [][]byte `protobuf:"bytes,3,rep,name=gateway_macs,json=gatewayMacs" json:"gateway_macs,omitempty"`
	// Set to true for sending as a gateway, or false for sending as a node.
	// In the latter case the frame will be received by other gateways.
	PolarizationInversion bool `protobuf:"varint,4,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
	// Frequency (Hz) to use for the transmission.
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Data-rate to use for the transmission.
	Dr uint32 `protobuf:"varint,6,opt,name=dr,proto3" json:"dr,omitempty"`
}

func (m *SendProprietaryPayloadRequest) Reset()                    { *m = SendProprietaryPayloadRequest{} }
func (m *SendProprietaryPayloadRequest) String() string            { return proto.CompactTextString(m) }
func (*SendProprietaryPayloadRequest) ProtoMessage()               {}
func (*SendProprietaryPayloadRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{44} }

func (m *SendProprietaryPayloadRequest) GetMacPayload() []byte {
	if m != nil {
		return m.MacPayload
	}
	return nil
}

func (m *SendProprietaryPayloadRequest) GetMic() []byte {
	if m != nil {
		return m.Mic
	}
	return nil
}

func (m *SendProprietaryPayloadRequest) GetGatewayMacs() [][]byte {
	if m != nil {
		return m.GatewayMacs
	}
	return nil
}

func (m *SendProprietaryPayloadRequest) GetPolarizationInversion() bool {
	if m != nil {
		return m.PolarizationInversion
	}
	return false
}

func (m *SendProprietaryPayloadRequest) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *SendProprietaryPayloadRequest) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

type SendProprietaryPayloadResponse struct {
}

func (m *SendProprietaryPayloadResponse) Reset()         { *m = SendProprietaryPayloadResponse{} }
func (m *SendProprietaryPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*SendProprietaryPayloadResponse) ProtoMessage()    {}
func (*SendProprietaryPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{45}
}

type Gateway struct {
	// Gateway ID.
	ID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"id"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// ID of the gateway-profile (optional).
	GatewayProfileID *github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,7,opt,name=gateway_profile_id,json=gatewayProfileId,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"gateway_profile_id,omitempty"`
}

func (m *Gateway) Reset()                    { *m = Gateway{} }
func (m *Gateway) String() string            { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()               {}
func (*Gateway) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{46} }

func (m *Gateway) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Gateway) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Gateway) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type CreateGatewayRequest struct {
	// Gateway object to create.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *CreateGatewayRequest) Reset()                    { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()               {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{47} }

func (m *CreateGatewayRequest) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type CreateGatewayResponse struct {
}

func (m *CreateGatewayResponse) Reset()                    { *m = CreateGatewayResponse{} }
func (m *CreateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayResponse) ProtoMessage()               {}
func (*CreateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{48} }

type GetGatewayRequest struct {
	// Gateway ID.
	ID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"id"`
}

func (m *GetGatewayRequest) Reset()                    { *m = GetGatewayRequest{} }
func (m *GetGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayRequest) ProtoMessage()               {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{49} }

type GetGatewayResponse struct {
	// Gateway object.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
	// Created at timestamp.
	CreatedAtUnixNS int64 `protobuf:"varint,2,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	// Last update timestamp.
	UpdatedAtUnixNS int64 `protobuf:"varint,3,opt,name=updated_at_unix_ns,json=updatedAtUnixNs,proto3" json:"updated_at_unix_ns,omitempty"`
	// First seen timestamp.
	FirstSeenAtUnixNS int64 `protobuf:"varint,4,opt,name=first_seen_at_unix_ns,json=firstSeenAtUnixNs,proto3" json:"first_seen_at_unix_ns,omitempty"`
	// Last seen timestamp.
	LastSeenAtUnixNS int64 `protobuf:"varint,5,opt,name=last_seen_at_unix_ns,json=lastSeenAtUnixNs,proto3" json:"last_seen_at_unix_ns,omitempty"`
}

func (m *GetGatewayResponse) Reset()                    { *m = GetGatewayResponse{} }
func (m *GetGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayResponse) ProtoMessage()               {}
func (*GetGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{50} }

func (m *GetGatewayResponse) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *GetGatewayResponse) GetCreatedAtUnixNS() int64 {
	if m != nil {
		return m.CreatedAtUnixNS
	}
	return 0
}

func (m *GetGatewayResponse) GetUpdatedAtUnixNS() int64 {
	if m != nil {
		return m.UpdatedAtUnixNS
	}
	return 0
}

func (m *GetGatewayResponse) GetFirstSeenAtUnixNS() int64 {
	if m != nil {
		return m.FirstSeenAtUnixNS
	}
	return 0
}

func (m *GetGatewayResponse) GetLastSeenAtUnixNS() int64 {
	if m != nil {
		return m.LastSeenAtUnixNS
	}
	return 0
}

type UpdateGatewayRequest struct {
	// Gateway object to update.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()                    { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()               {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{51} }

func (m *UpdateGatewayRequest) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type UpdateGatewayResponse struct {
}

func (m *UpdateGatewayResponse) Reset()                    { *m = UpdateGatewayResponse{} }
func (m *UpdateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayResponse) ProtoMessage()               {}
func (*UpdateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{52} }

type DeleteGatewayRequest struct {
	// Gateway ID.
	ID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"id"`
}

func (m *DeleteGatewayRequest) Reset()                    { *m = DeleteGatewayRequest{} }
func (m *DeleteGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayRequest) ProtoMessage()               {}
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{53} }

type DeleteGatewayResponse struct {
}

func (m *DeleteGatewayResponse) Reset()                    { *m = DeleteGatewayResponse{} }
func (m *DeleteGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayResponse) ProtoMessage()               {}
func (*DeleteGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{54} }

type GatewayStats struct {
	// Timestamp of the (aggregated) measurement.
	TimestampUnixNS int64 `protobuf:"varint,1,opt,name=timestamp_unix_ns,json=timestampUnixNs,proto3" json:"timestamp_unix_ns,omitempty"`
	// Packets received by the gateway.
	RXPacketsReceived int32 `protobuf:"varint,2,opt,name=rx_packets_received,json=rxPacketsReceived,proto3" json:"rx_packets_received,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RXPacketsReceivedOK int32 `protobuf:"varint,3,opt,name=rx_packets_received_ok,json=rxPacketsReceivedOk,proto3" json:"rx_packets_received_ok,omitempty"`
	// Packets received by the gateway for transmission.
	TXPacketsReceived int32 `protobuf:"varint,4,opt,name=tx_packets_received,json=txPacketsReceived,proto3" json:"tx_packets_received,omitempty"`
	// Packets transmitted by the gateway.
	TXPacketsEmitted int32 `protobuf:"varint,5,opt,name=tx_packets_emitted,json=txPacketsEmitted,proto3" json:"tx_packets_emitted,omitempty"`
}

func (m *GatewayStats) Reset()                    { *m = GatewayStats{} }
func (m *GatewayStats) String() string            { return proto.CompactTextString(m) }
func (*GatewayStats) ProtoMessage()               {}
func (*GatewayStats) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{55} }

func (m *GatewayStats) GetTimestampUnixNS() int64 {
	if m != nil {
		return m.TimestampUnixNS
	}
	return 0
}

func (m *GatewayStats) GetRXPacketsReceived() int32 {
	if m != nil {
		return m.RXPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetRXPacketsReceivedOK() int32 {
	if m != nil {
		return m.RXPacketsReceivedOK
	}
	return 0
}

func (m *GatewayStats) GetTXPacketsReceived() int32 {
	if m != nil {
		return m.TXPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetTXPacketsEmitted() int32 {
	if m != nil {
		return m.TXPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	// MAC address of the gateway.
	ID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"id"`
	// Aggregation interval.
	Interval AggregationInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=ns.AggregationInterval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestampUnixNS int64 `protobuf:"varint,3,opt,name=start_timestamp_unix_ns,json=startTimestampUnixNs,proto3" json:"start_timestamp_unix_ns,omitempty"`
	// Timestamp until to get from.
	EndTimestampUnixNS int64 `protobuf:"varint,4,opt,name=end_timestamp_unix_ns,json=endTimestampUnixNs,proto3" json:"end_timestamp_unix_ns,omitempty"`
}

func (m *GetGatewayStatsRequest) Reset()                    { *m = GetGatewayStatsRequest{} }
func (m *GetGatewayStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsRequest) ProtoMessage()               {}
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{56} }

func (m *GetGatewayStatsRequest) GetInterval() AggregationInterval {
	if m != nil {
		return m.Interval
	}
	return AggregationInterval_SECOND
}

func (m *GetGatewayStatsRequest) GetStartTimestampUnixNS() int64 {
	if m != nil {
		return m.StartTimestampUnixNS
	}
	return 0
}

func (m *GetGatewayStatsRequest) GetEndTimestampUnixNS() int64 {
	if m != nil {
		return m.EndTimestampUnixNS
	}
	return 0
}

type GetGatewayStatsResponse struct {
	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetGatewayStatsResponse) Reset()                    { *m = GetGatewayStatsResponse{} }
func (m *GetGatewayStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsResponse) ProtoMessage()               {}
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{57} }

func (m *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeviceQueueItem struct {
	// DevEUI of the device.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
	// The encrypted FRMPayload bytes.
	FrmPayload []byte `protobuf:"bytes,2,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// The FCnt of the payload.
	FCnt uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// The FPort of the payload.
	FPort uint32 `protobuf:"varint,4,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// When set to true, LoRa Server will wait for the device to ack the
	// received frame.
	Confirmed bool `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (m *DeviceQueueItem) Reset()                    { *m = DeviceQueueItem{} }
func (m *DeviceQueueItem) String() string            { return proto.CompactTextString(m) }
func (*DeviceQueueItem) ProtoMessage()               {}
func (*DeviceQueueItem) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{58} }

func (m *DeviceQueueItem) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

func (m *DeviceQueueItem) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *DeviceQueueItem) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *DeviceQueueItem) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

type CreateDeviceQueueItemRequest struct {
	Item *DeviceQueueItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *CreateDeviceQueueItemRequest) Reset()                    { *m = CreateDeviceQueueItemRequest{} }
func (m *CreateDeviceQueueItemRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceQueueItemRequest) ProtoMessage()               {}
func (*CreateDeviceQueueItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{59} }

func (m *CreateDeviceQueueItemRequest) GetItem() *DeviceQueueItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type CreateDeviceQueueItemResponse struct {
}

func (m *CreateDeviceQueueItemResponse) Reset()                    { *m = CreateDeviceQueueItemResponse{} }
func (m *CreateDeviceQueueItemResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceQueueItemResponse) ProtoMessage()               {}
func (*CreateDeviceQueueItemResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{60} }

type FlushDeviceQueueForDevEUIRequest struct {
	// DevEUI of the device.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *FlushDeviceQueueForDevEUIRequest) Reset()         { *m = FlushDeviceQueueForDevEUIRequest{} }
func (m *FlushDeviceQueueForDevEUIRequest) String() string { return proto.CompactTextString(m) }
func (*FlushDeviceQueueForDevEUIRequest) ProtoMessage()    {}
func (*FlushDeviceQueueForDevEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{61}
}

type FlushDeviceQueueForDevEUIResponse struct {
}

func (m *FlushDeviceQueueForDevEUIResponse) Reset()         { *m = FlushDeviceQueueForDevEUIResponse{} }
func (m *FlushDeviceQueueForDevEUIResponse) String() string { return proto.CompactTextString(m) }
func (*FlushDeviceQueueForDevEUIResponse) ProtoMessage()    {}
func (*FlushDeviceQueueForDevEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{62}
}

type GetDeviceQueueItemsForDevEUIRequest struct {
	// DevEUI of the device.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *GetDeviceQueueItemsForDevEUIRequest) Reset()         { *m = GetDeviceQueueItemsForDevEUIRequest{} }
func (m *GetDeviceQueueItemsForDevEUIRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeviceQueueItemsForDevEUIRequest) ProtoMessage()    {}
func (*GetDeviceQueueItemsForDevEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{63}
}

type GetDeviceQueueItemsForDevEUIResponse struct {
	Items []*DeviceQueueItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *GetDeviceQueueItemsForDevEUIResponse) Reset()         { *m = GetDeviceQueueItemsForDevEUIResponse{} }
func (m *GetDeviceQueueItemsForDevEUIResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeviceQueueItemsForDevEUIResponse) ProtoMessage()    {}
func (*GetDeviceQueueItemsForDevEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{64}
}

func (m *GetDeviceQueueItemsForDevEUIResponse) GetItems() []*DeviceQueueItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetNextDownlinkFCntForDevEUIRequest struct {
	// DevEUI of the device.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *GetNextDownlinkFCntForDevEUIRequest) Reset()         { *m = GetNextDownlinkFCntForDevEUIRequest{} }
func (m *GetNextDownlinkFCntForDevEUIRequest) String() string { return proto.CompactTextString(m) }
func (*GetNextDownlinkFCntForDevEUIRequest) ProtoMessage()    {}
func (*GetNextDownlinkFCntForDevEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{65}
}

type GetNextDownlinkFCntForDevEUIResponse struct {
	// The frame-counter to use.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (m *GetNextDownlinkFCntForDevEUIResponse) Reset()         { *m = GetNextDownlinkFCntForDevEUIResponse{} }
func (m *GetNextDownlinkFCntForDevEUIResponse) String() string { return proto.CompactTextString(m) }
func (*GetNextDownlinkFCntForDevEUIResponse) ProtoMessage()    {}
func (*GetNextDownlinkFCntForDevEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{66}
}

func (m *GetNextDownlinkFCntForDevEUIResponse) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type StreamFrameLogsForGatewayRequest struct {
	// MAC address of the gateway.
	GatewayID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=GatewayID,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"GatewayID"`
}

func (m *StreamFrameLogsForGatewayRequest) Reset()         { *m = StreamFrameLogsForGatewayRequest{} }
func (m *StreamFrameLogsForGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForGatewayRequest) ProtoMessage()    {}
func (*StreamFrameLogsForGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{67}
}

type StreamFrameLogsForGatewayResponse struct {
	// Contains zero or one uplink frame.
	UplinkFrames []*UplinkFrameLog `protobuf:"bytes,1,rep,name=uplink_frames,json=uplinkFrames" json:"uplink_frames,omitempty"`
	// Contains zero or one downlink frame.
	DownlinkFrames []*DownlinkFrameLog `protobuf:"bytes,2,rep,name=downlink_frames,json=downlinkFrames" json:"downlink_frames,omitempty"`
}

func (m *StreamFrameLogsForGatewayResponse) Reset()         { *m = StreamFrameLogsForGatewayResponse{} }
func (m *StreamFrameLogsForGatewayResponse) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForGatewayResponse) ProtoMessage()    {}
func (*StreamFrameLogsForGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{68}
}

func (m *StreamFrameLogsForGatewayResponse) GetUplinkFrames() []*UplinkFrameLog {
	if m != nil {
		return m.UplinkFrames
	}
	return nil
}

func (m *StreamFrameLogsForGatewayResponse) GetDownlinkFrames() []*DownlinkFrameLog {
	if m != nil {
		return m.DownlinkFrames
	}
	return nil
}

type StreamFrameLogsForDeviceRequest struct {
	// DevEUI of the device.
	DevEUI github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"dev_eui"`
}

func (m *StreamFrameLogsForDeviceRequest) Reset()         { *m = StreamFrameLogsForDeviceRequest{} }
func (m *StreamFrameLogsForDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForDeviceRequest) ProtoMessage()    {}
func (*StreamFrameLogsForDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{69}
}

type StreamFrameLogsForDeviceResponse struct {
	// Contains zero or one uplink frame.
	UplinkFrames []*UplinkFrameLog `protobuf:"bytes,1,rep,name=uplink_frames,json=uplinkFrames" json:"uplink_frames,omitempty"`
	// Contains zero or one downlink frame.
	DownlinkFrames []*DownlinkFrameLog `protobuf:"bytes,2,rep,name=downlink_frames,json=downlinkFrames" json:"downlink_frames,omitempty"`
}

func (m *StreamFrameLogsForDeviceResponse) Reset()         { *m = StreamFrameLogsForDeviceResponse{} }
func (m *StreamFrameLogsForDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForDeviceResponse) ProtoMessage()    {}
func (*StreamFrameLogsForDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorNs, []int{70}
}

func (m *StreamFrameLogsForDeviceResponse) GetUplinkFrames() []*UplinkFrameLog {
	if m != nil {
		return m.UplinkFrames
	}
	return nil
}

func (m *StreamFrameLogsForDeviceResponse) GetDownlinkFrames() []*DownlinkFrameLog {
	if m != nil {
		return m.DownlinkFrames
	}
	return nil
}

type DataRate struct {
	// The used modulation (LORA or FSK).
	Modulation string `protobuf:"bytes,1,opt,name=modulation,proto3" json:"modulation,omitempty"`
	// Bandwidth (in kHz).
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Used spreading-factor.
	SpreadingFactor uint32 `protobuf:"varint,3,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// Bitrate (used for FSK modulation).
	Bitrate uint32 `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
}

func (m *DataRate) Reset()                    { *m = DataRate{} }
func (m *DataRate) String() string            { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()               {}
func (*DataRate) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{71} }

func (m *DataRate) GetModulation() string {
	if m != nil {
		return m.Modulation
	}
	return ""
}

func (m *DataRate) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *DataRate) GetSpreadingFactor() uint32 {
	if m != nil {
		return m.SpreadingFactor
	}
	return 0
}

func (m *DataRate) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type UplinkTXInfo struct {
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,2,opt,name=data_rate,json=dataRate" json:"data_rate,omitempty"`
	// Code rate.
	CodeRate string `protobuf:"bytes,3,opt,name=code_rate,json=codeRate,proto3" json:"code_rate,omitempty"`
}

func (m *UplinkTXInfo) Reset()                    { *m = UplinkTXInfo{} }
func (m *UplinkTXInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkTXInfo) ProtoMessage()               {}
func (*UplinkTXInfo) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{72} }

func (m *UplinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *UplinkTXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *UplinkTXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

type UplinkRXInfo struct {
	// Gateway MAC.
	GatewayID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"gateway_id"`
	// Time when the frame was received (if available).
	TimeUnixNS int64 `protobuf:"varint,2,opt,name=time_unix_ns,json=timeUnixNs,proto3" json:"time_unix_ns,omitempty"`
	// Time when the frame was received as time since GPS epoch (if available).
	NSSinceGPSEpoch int64 `protobuf:"varint,3,opt,name=ns_since_gps_epoch,json=nsSinceGpsEpoch,proto3" json:"ns_since_gps_epoch,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// RSSI.
	RSSI int32 `protobuf:"varint,5,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// LoRa SNR.
	LoRaSNR float32 `protobuf:"fixed32,6,opt,name=lora_snr,json=loraSnr,proto3" json:"lora_snr,omitempty"`
	// The board identifier that received the uplink frame.
	Board uint32 `protobuf:"varint,7,opt,name=board,proto3" json:"board,omitempty"`
	// THe antenna identifier that received the uplink frame.
	Antenna uint32 `protobuf:"varint,8,opt,name=antenna,proto3" json:"antenna,omitempty"`
}

func (m *UplinkRXInfo) Reset()                    { *m = UplinkRXInfo{} }
func (m *UplinkRXInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkRXInfo) ProtoMessage()               {}
func (*UplinkRXInfo) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{73} }

func (m *UplinkRXInfo) GetTimeUnixNS() int64 {
	if m != nil {
		return m.TimeUnixNS
	}
	return 0
}

func (m *UplinkRXInfo) GetNSSinceGPSEpoch() int64 {
	if m != nil {
		return m.NSSinceGPSEpoch
	}
	return 0
}

func (m *UplinkRXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UplinkRXInfo) GetRSSI() int32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *UplinkRXInfo) GetLoRaSNR() float32 {
	if m != nil {
		return m.LoRaSNR
	}
	return 0
}

func (m *UplinkRXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *UplinkRXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

type UplinkFrameLog struct {
	// TX information of the uplink.
	TXInfo *UplinkTXInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo" json:"tx_info,omitempty"`
	// RX information of the uplink.
	RXInfo []*UplinkRXInfo `protobuf:"bytes,2,rep,name=rx_info,json=rxInfo" json:"rx_info,omitempty"`
	// LoRaWAN PHYPayload.
	PHYPayload []byte `protobuf:"bytes,3,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
}

func (m *UplinkFrameLog) Reset()                    { *m = UplinkFrameLog{} }
func (m *UplinkFrameLog) String() string            { return proto.CompactTextString(m) }
func (*UplinkFrameLog) ProtoMessage()               {}
func (*UplinkFrameLog) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{74} }

func (m *UplinkFrameLog) GetTXInfo() *UplinkTXInfo {
	if m != nil {
		return m.TXInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetRXInfo() []*UplinkRXInfo {
	if m != nil {
		return m.RXInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetPHYPayload() []byte {
	if m != nil {
		return m.PHYPayload
	}
	return nil
}

type DownlinkTXInfo struct {
	// Gateway MAC.
	GatewayID github_com_brocaar_loraserver_api_types.EUI64 `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3,customtype=github.com/brocaar/loraserver/api/types.EUI64" json:"gateway_id"`
	// Frame must be sent immediately.
	Immediately bool `protobuf:"varint,2,opt,name=immediately,proto3" json:"immediately,omitempty"`
	// Transmit frame at the given time since GPS epoch.
	NSSinceGPSEpoch int64 `protobuf:"varint,3,opt,name=ns_since_gps_epoch,json=nsSinceGpsEpoch,proto3" json:"ns_since_gps_epoch,omitempty"`
	// Transmit the frame at the given gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// TX power (in dBm).
	Power int32 `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,7,opt,name=data_rate,json=dataRate" json:"data_rate,omitempty"`
	// Code rate.
	CodeRate string `protobuf:"bytes,8,opt,name=code_rate,json=codeRate,proto3" json:"code_rate,omitempty"`
	// Lora modulation polarization inversion.
	PolarizationInversion bool `protobuf:"varint,9,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
	// The board identifier that received the uplink frame.
	Board uint32 `protobuf:"varint,10,opt,name=board,proto3" json:"board,omitempty"`
	// THe antenna identifier that received the uplink frame.
	Antenna uint32 `protobuf:"varint,11,opt,name=antenna,proto3" json:"antenna,omitempty"`
}

func (m *DownlinkTXInfo) Reset()                    { *m = DownlinkTXInfo{} }
func (m *DownlinkTXInfo) String() string            { return proto.CompactTextString(m) }
func (*DownlinkTXInfo) ProtoMessage()               {}
func (*DownlinkTXInfo) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{75} }

func (m *DownlinkTXInfo) GetImmediately() bool {
	if m != nil {
		return m.Immediately
	}
	return false
}

func (m *DownlinkTXInfo) GetNSSinceGPSEpoch() int64 {
	if m != nil {
		return m.NSSinceGPSEpoch
	}
	return 0
}

func (m *DownlinkTXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DownlinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DownlinkTXInfo) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *DownlinkTXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *DownlinkTXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *DownlinkTXInfo) GetPolarizationInversion() bool {
	if m != nil {
		return m.PolarizationInversion
	}
	return false
}

func (m *DownlinkTXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *DownlinkTXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

type DownlinkFrameLog struct {
	// TX information of the downlink.
	TXInfo *DownlinkTXInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo" json:"tx_info,omitempty"`
	// LoRaWAN PHYPayload.
	PHYPayload []byte `protobuf:"bytes,2,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
}

func (m *DownlinkFrameLog) Reset()                    { *m = DownlinkFrameLog{} }
func (m *DownlinkFrameLog) String() string            { return proto.CompactTextString(m) }
func (*DownlinkFrameLog) ProtoMessage()               {}
func (*DownlinkFrameLog) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{76} }

func (m *DownlinkFrameLog) GetTXInfo() *DownlinkTXInfo {
	if m != nil {
		return m.TXInfo
	}
	return nil
}

func (m *DownlinkFrameLog) GetPHYPayload() []byte {
	if m != nil {
		return m.PHYPayload
	}
	return nil
}

type GetVersionRequest struct {
}

func (m *GetVersionRequest) Reset()                    { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()               {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{77} }

type GetVersionResponse struct {
	// LoRa Server version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Region configured for this network-server.
	Region Region `protobuf:"varint,2,opt,name=region,proto3,enum=ns.Region" json:"region,omitempty"`
}

func (m *GetVersionResponse) Reset()                    { *m = GetVersionResponse{} }
func (m *GetVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVersionResponse) ProtoMessage()               {}
func (*GetVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{78} }

func (m *GetVersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetVersionResponse) GetRegion() Region {
	if m != nil {
		return m.Region
	}
	return Region_EU868
}

type GatewayProfile struct {
	// ID of the gateway-profile.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
	// Default channels (channels specified by the LoRaWAN Regional Parameters
	// specification) enabled for this configuration.
	Channels []uint32 `protobuf:"varint,2,rep,packed,name=channels" json:"channels,omitempty"`
	// Extra channels added to the channel-configuration (in case the LoRaWAN
	// region supports adding custom channels).
	ExtraChannels []*GatewayProfileExtraChannel `protobuf:"bytes,3,rep,name=extra_channels,json=extraChannels" json:"extra_channels,omitempty"`
}

func (m *GatewayProfile) Reset()                    { *m = GatewayProfile{} }
func (m *GatewayProfile) String() string            { return proto.CompactTextString(m) }
func (*GatewayProfile) ProtoMessage()               {}
func (*GatewayProfile) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{79} }

func (m *GatewayProfile) GetChannels() []uint32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GatewayProfile) GetExtraChannels() []*GatewayProfileExtraChannel {
	if m != nil {
		return m.ExtraChannels
	}
	return nil
}

type GatewayProfileExtraChannel struct {
	// Modulation.
	Modulation Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=ns.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Bandwidth.
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Bitrate (in case of FSK modulation).
	Bitrate uint32 `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// Spreading factors (in case of LoRa modulation).
	SpreadingFactors []uint32 `protobuf:"varint,5,rep,packed,name=spreading_factors,json=spreadingFactors" json:"spreading_factors,omitempty"`
}

func (m *GatewayProfileExtraChannel) Reset()                    { *m = GatewayProfileExtraChannel{} }
func (m *GatewayProfileExtraChannel) String() string            { return proto.CompactTextString(m) }
func (*GatewayProfileExtraChannel) ProtoMessage()               {}
func (*GatewayProfileExtraChannel) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{80} }

func (m *GatewayProfileExtraChannel) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *GatewayProfileExtraChannel) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayProfileExtraChannel) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *GatewayProfileExtraChannel) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *GatewayProfileExtraChannel) GetSpreadingFactors() []uint32 {
	if m != nil {
		return m.SpreadingFactors
	}
	return nil
}

type CreateGatewayProfileRequest struct {
	// Gateway-profile object to create.
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gateway_profile,json=gatewayProfile" json:"gateway_profile,omitempty"`
}

func (m *CreateGatewayProfileRequest) Reset()                    { *m = CreateGatewayProfileRequest{} }
func (m *CreateGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayProfileRequest) ProtoMessage()               {}
func (*CreateGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{81} }

func (m *CreateGatewayProfileRequest) GetGatewayProfile() *GatewayProfile {
	if m != nil {
		return m.GatewayProfile
	}
	return nil
}

type CreateGatewayProfileResponse struct {
	// ID of the create configuration object.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *CreateGatewayProfileResponse) Reset()                    { *m = CreateGatewayProfileResponse{} }
func (m *CreateGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayProfileResponse) ProtoMessage()               {}
func (*CreateGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{82} }

type GetGatewayProfileRequest struct {
	// Gateway-profile ID.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *GetGatewayProfileRequest) Reset()                    { *m = GetGatewayProfileRequest{} }
func (m *GetGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayProfileRequest) ProtoMessage()               {}
func (*GetGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{83} }

type GetGatewayProfileResponse struct {
	// Gateway-profile object.
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gateway_profile,json=gatewayProfile" json:"gateway_profile,omitempty"`
	// Created at timestamp.
	CreatedAtUnixNS int64 `protobuf:"varint,2,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	// Last update timestamp.
	UpdatedAtUnixNS int64 `protobuf:"varint,3,opt,name=updated_at_unix_ns,json=updatedAtUnixNs,proto3" json:"updated_at_unix_ns,omitempty"`
}

func (m *GetGatewayProfileResponse) Reset()                    { *m = GetGatewayProfileResponse{} }
func (m *GetGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayProfileResponse) ProtoMessage()               {}
func (*GetGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{84} }

func (m *GetGatewayProfileResponse) GetGatewayProfile() *GatewayProfile {
	if m != nil {
		return m.GatewayProfile
	}
	return nil
}

func (m *GetGatewayProfileResponse) GetCreatedAtUnixNS() int64 {
	if m != nil {
		return m.CreatedAtUnixNS
	}
	return 0
}

func (m *GetGatewayProfileResponse) GetUpdatedAtUnixNS() int64 {
	if m != nil {
		return m.UpdatedAtUnixNS
	}
	return 0
}

type UpdateGatewayProfileRequest struct {
	// Gateway-profile object to update.
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gateway_profile,json=gatewayProfile" json:"gateway_profile,omitempty"`
}

func (m *UpdateGatewayProfileRequest) Reset()                    { *m = UpdateGatewayProfileRequest{} }
func (m *UpdateGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayProfileRequest) ProtoMessage()               {}
func (*UpdateGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{85} }

func (m *UpdateGatewayProfileRequest) GetGatewayProfile() *GatewayProfile {
	if m != nil {
		return m.GatewayProfile
	}
	return nil
}

type UpdateGatewayProfileResponse struct {
}

func (m *UpdateGatewayProfileResponse) Reset()                    { *m = UpdateGatewayProfileResponse{} }
func (m *UpdateGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayProfileResponse) ProtoMessage()               {}
func (*UpdateGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{86} }

type DeleteGatewayProfileRequest struct {
	// Gateway-profile ID.
	ID github_com_brocaar_loraserver_api_types.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/brocaar/loraserver/api/types.UUID" json:"id"`
}

func (m *DeleteGatewayProfileRequest) Reset()                    { *m = DeleteGatewayProfileRequest{} }
func (m *DeleteGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayProfileRequest) ProtoMessage()               {}
func (*DeleteGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{87} }

type DeleteGatewayProfileResponse struct {
}

func (m *DeleteGatewayProfileResponse) Reset()                    { *m = DeleteGatewayProfileResponse{} }
func (m *DeleteGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayProfileResponse) ProtoMessage()               {}
func (*DeleteGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorNs, []int{88} }

func init() {
	proto.RegisterType((*CreateServiceProfileRequest)(nil), "ns.CreateServiceProfileRequest")
	proto.RegisterType((*CreateServiceProfileResponse)(nil), "ns.CreateServiceProfileResponse")
	proto.RegisterType((*GetServiceProfileRequest)(nil), "ns.GetServiceProfileRequest")
	proto.RegisterType((*GetServiceProfileResponse)(nil), "ns.GetServiceProfileResponse")
	proto.RegisterType((*UpdateServiceProfileRequest)(nil), "ns.UpdateServiceProfileRequest")
	proto.RegisterType((*UpdateServiceProfileResponse)(nil), "ns.UpdateServiceProfileResponse")
	proto.RegisterType((*DeleteServiceProfileRequest)(nil), "ns.DeleteServiceProfileRequest")
	proto.RegisterType((*DeleteServiceProfileResponse)(nil), "ns.DeleteServiceProfileResponse")
	proto.RegisterType((*CreateRoutingProfileRequest)(nil), "ns.CreateRoutingProfileRequest")
	proto.RegisterType((*CreateRoutingProfileResponse)(nil), "ns.CreateRoutingProfileResponse")
	proto.RegisterType((*GetRoutingProfileRequest)(nil), "ns.GetRoutingProfileRequest")
	proto.RegisterType((*GetRoutingProfileResponse)(nil), "ns.GetRoutingProfileResponse")
	proto.RegisterType((*UpdateRoutingProfileRequest)(nil), "ns.UpdateRoutingProfileRequest")
	proto.RegisterType((*UpdateRoutingProfileResponse)(nil), "ns.UpdateRoutingProfileResponse")
	proto.RegisterType((*DeleteRoutingProfileRequest)(nil), "ns.DeleteRoutingProfileRequest")
	proto.RegisterType((*DeleteRoutingProfileResponse)(nil), "ns.DeleteRoutingProfileResponse")
	proto.RegisterType((*CreateDeviceProfileRequest)(nil), "ns.CreateDeviceProfileRequest")
	proto.RegisterType((*CreateDeviceProfileResponse)(nil), "ns.CreateDeviceProfileResponse")
	proto.RegisterType((*GetDeviceProfileRequest)(nil), "ns.GetDeviceProfileRequest")
	proto.RegisterType((*GetDeviceProfileResponse)(nil), "ns.GetDeviceProfileResponse")
	proto.RegisterType((*UpdateDeviceProfileRequest)(nil), "ns.UpdateDeviceProfileRequest")
	proto.RegisterType((*UpdateDeviceProfileResponse)(nil), "ns.UpdateDeviceProfileResponse")
	proto.RegisterType((*DeleteDeviceProfileRequest)(nil), "ns.DeleteDeviceProfileRequest")
	proto.RegisterType((*DeleteDeviceProfileResponse)(nil), "ns.DeleteDeviceProfileResponse")
	proto.RegisterType((*Device)(nil), "ns.Device")
	proto.RegisterType((*CreateDeviceRequest)(nil), "ns.CreateDeviceRequest")
	proto.RegisterType((*CreateDeviceResponse)(nil), "ns.CreateDeviceResponse")
	proto.RegisterType((*GetDeviceRequest)(nil), "ns.GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "ns.GetDeviceResponse")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "ns.UpdateDeviceRequest")
	proto.RegisterType((*UpdateDeviceResponse)(nil), "ns.UpdateDeviceResponse")
	proto.RegisterType((*DeleteDeviceRequest)(nil), "ns.DeleteDeviceRequest")
	proto.RegisterType((*DeleteDeviceResponse)(nil), "ns.DeleteDeviceResponse")
	proto.RegisterType((*DeviceActivation)(nil), "ns.DeviceActivation")
	proto.RegisterType((*ActivateDeviceRequest)(nil), "ns.ActivateDeviceRequest")
	proto.RegisterType((*ActivateDeviceResponse)(nil), "ns.ActivateDeviceResponse")
	proto.RegisterType((*DeactivateDeviceRequest)(nil), "ns.DeactivateDeviceRequest")
	proto.RegisterType((*DeactivateDeviceResponse)(nil), "ns.DeactivateDeviceResponse")
	proto.RegisterType((*GetDeviceActivationRequest)(nil), "ns.GetDeviceActivationRequest")
	proto.RegisterType((*GetDeviceActivationResponse)(nil), "ns.GetDeviceActivationResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "ns.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "ns.GetRandomDevAddrResponse")
	proto.RegisterType((*CreateMACCommandQueueItemRequest)(nil), "ns.CreateMACCommandQueueItemRequest")
	proto.RegisterType((*CreateMACCommandQueueItemResponse)(nil), "ns.CreateMACCommandQueueItemResponse")
	proto.RegisterType((*SendProprietaryPayloadRequest)(nil), "ns.SendProprietaryPayloadRequest")
	proto.RegisterType((*SendProprietaryPayloadResponse)(nil), "ns.SendProprietaryPayloadResponse")
	proto.RegisterType((*Gateway)(nil), "ns.Gateway")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ns.CreateGatewayRequest")
	proto.RegisterType((*CreateGatewayResponse)(nil), "ns.CreateGatewayResponse")
	proto.RegisterType((*GetGatewayRequest)(nil), "ns.GetGatewayRequest")
	proto.RegisterType((*GetGatewayResponse)(nil), "ns.GetGatewayResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ns.UpdateGatewayRequest")
	proto.RegisterType((*UpdateGatewayResponse)(nil), "ns.UpdateGatewayResponse")
	proto.RegisterType((*DeleteGatewayRequest)(nil), "ns.DeleteGatewayRequest")
	proto.RegisterType((*DeleteGatewayResponse)(nil), "ns.DeleteGatewayResponse")
	proto.RegisterType((*GatewayStats)(nil), "ns.GatewayStats")
	proto.RegisterType((*GetGatewayStatsRequest)(nil), "ns.GetGatewayStatsRequest")
	proto.RegisterType((*GetGatewayStatsResponse)(nil), "ns.GetGatewayStatsResponse")
	proto.RegisterType((*DeviceQueueItem)(nil), "ns.DeviceQueueItem")
	proto.RegisterType((*CreateDeviceQueueItemRequest)(nil), "ns.CreateDeviceQueueItemRequest")
	proto.RegisterType((*CreateDeviceQueueItemResponse)(nil), "ns.CreateDeviceQueueItemResponse")
	proto.RegisterType((*FlushDeviceQueueForDevEUIRequest)(nil), "ns.FlushDeviceQueueForDevEUIRequest")
	proto.RegisterType((*FlushDeviceQueueForDevEUIResponse)(nil), "ns.FlushDeviceQueueForDevEUIResponse")
	proto.RegisterType((*GetDeviceQueueItemsForDevEUIRequest)(nil), "ns.GetDeviceQueueItemsForDevEUIRequest")
	proto.RegisterType((*GetDeviceQueueItemsForDevEUIResponse)(nil), "ns.GetDeviceQueueItemsForDevEUIResponse")
	proto.RegisterType((*GetNextDownlinkFCntForDevEUIRequest)(nil), "ns.GetNextDownlinkFCntForDevEUIRequest")
	proto.RegisterType((*GetNextDownlinkFCntForDevEUIResponse)(nil), "ns.GetNextDownlinkFCntForDevEUIResponse")
	proto.RegisterType((*StreamFrameLogsForGatewayRequest)(nil), "ns.StreamFrameLogsForGatewayRequest")
	proto.RegisterType((*StreamFrameLogsForGatewayResponse)(nil), "ns.StreamFrameLogsForGatewayResponse")
	proto.RegisterType((*StreamFrameLogsForDeviceRequest)(nil), "ns.StreamFrameLogsForDeviceRequest")
	proto.RegisterType((*StreamFrameLogsForDeviceResponse)(nil), "ns.StreamFrameLogsForDeviceResponse")
	proto.RegisterType((*DataRate)(nil), "ns.DataRate")
	proto.RegisterType((*UplinkTXInfo)(nil), "ns.UplinkTXInfo")
	proto.RegisterType((*UplinkRXInfo)(nil), "ns.UplinkRXInfo")
	proto.RegisterType((*UplinkFrameLog)(nil), "ns.UplinkFrameLog")
	proto.RegisterType((*DownlinkTXInfo)(nil), "ns.DownlinkTXInfo")
	proto.RegisterType((*DownlinkFrameLog)(nil), "ns.DownlinkFrameLog")
	proto.RegisterType((*GetVersionRequest)(nil), "ns.GetVersionRequest")
	proto.RegisterType((*GetVersionResponse)(nil), "ns.GetVersionResponse")
	proto.RegisterType((*GatewayProfile)(nil), "ns.GatewayProfile")
	proto.RegisterType((*GatewayProfileExtraChannel)(nil), "ns.GatewayProfileExtraChannel")
	proto.RegisterType((*CreateGatewayProfileRequest)(nil), "ns.CreateGatewayProfileRequest")
	proto.RegisterType((*CreateGatewayProfileResponse)(nil), "ns.CreateGatewayProfileResponse")
	proto.RegisterType((*GetGatewayProfileRequest)(nil), "ns.GetGatewayProfileRequest")
	proto.RegisterType((*GetGatewayProfileResponse)(nil), "ns.GetGatewayProfileResponse")
	proto.RegisterType((*UpdateGatewayProfileRequest)(nil), "ns.UpdateGatewayProfileRequest")
	proto.RegisterType((*UpdateGatewayProfileResponse)(nil), "ns.UpdateGatewayProfileResponse")
	proto.RegisterType((*DeleteGatewayProfileRequest)(nil), "ns.DeleteGatewayProfileRequest")
	proto.RegisterType((*DeleteGatewayProfileResponse)(nil), "ns.DeleteGatewayProfileResponse")
	proto.RegisterEnum("ns.RXWindow", RXWindow_name, RXWindow_value)
	proto.RegisterEnum("ns.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("ns.Region", Region_name, Region_value)
	proto.RegisterEnum("ns.AggregationInterval", AggregationInterval_name, AggregationInterval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServerService service

type NetworkServerServiceClient interface {
	// CreateServiceProfile creates the given service-profile.
	CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error)
	// GetServiceProfile returns the service-profile matching the given id.
	GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error)
	// UpdateServiceProfile updates the given service-profile.
	UpdateServiceProfile(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*UpdateServiceProfileResponse, error)
	// DeleteServiceProfile deletes the service-profile matching the given id.
	DeleteServiceProfile(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*DeleteServiceProfileResponse, error)
	// CreateRoutingProfile creates the given routing-profile.
	CreateRoutingProfile(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error)
	// GetRoutingProfile returns the routing-profile matching the given id.
	GetRoutingProfile(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error)
	// UpdateRoutingProfile updates the given routing-profile.
	UpdateRoutingProfile(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*UpdateRoutingProfileResponse, error)
	// DeleteRoutingProfile deletes the routing-profile matching the given id.
	DeleteRoutingProfile(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*DeleteRoutingProfileResponse, error)
	// CreateDeviceProfile creates the given device-profile.
	CreateDeviceProfile(ctx context.Context, in *CreateDeviceProfileRequest, opts ...grpc.CallOption) (*CreateDeviceProfileResponse, error)
	// GetDeviceProfile returns the device-profile matching the given id.
	GetDeviceProfile(ctx context.Context, in *GetDeviceProfileRequest, opts ...grpc.CallOption) (*GetDeviceProfileResponse, error)
	// UpdateDeviceProfile updates the given device-profile.
	UpdateDeviceProfile(ctx context.Context, in *UpdateDeviceProfileRequest, opts ...grpc.CallOption) (*UpdateDeviceProfileResponse, error)
	// DeleteDeviceProfile deletes the device-profile matching the given id.
	DeleteDeviceProfile(ctx context.Context, in *DeleteDeviceProfileRequest, opts ...grpc.CallOption) (*DeleteDeviceProfileResponse, error)
	// CreateDevice creates the given device.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	// GetDevice returns the device matching the given DevEUI.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// UpdateDevice updates the given device.
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	// DeleteDevice deletes the device matching the given DevEUI.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	// ActivateDevice activates a device (ABP).
	ActivateDevice(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*ActivateDeviceResponse, error)
	// DeactivateDevice de-activates a device.
	DeactivateDevice(ctx context.Context, in *DeactivateDeviceRequest, opts ...grpc.CallOption) (*DeactivateDeviceResponse, error)
	// GetDeviceActivation returns the device activation details.
	GetDeviceActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error)
	// CreateDeviceQueueItem creates the given device-queue item.
	CreateDeviceQueueItem(ctx context.Context, in *CreateDeviceQueueItemRequest, opts ...grpc.CallOption) (*CreateDeviceQueueItemResponse, error)
	// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
	FlushDeviceQueueForDevEUI(ctx context.Context, in *FlushDeviceQueueForDevEUIRequest, opts ...grpc.CallOption) (*FlushDeviceQueueForDevEUIResponse, error)
	// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
	GetDeviceQueueItemsForDevEUI(ctx context.Context, in *GetDeviceQueueItemsForDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceQueueItemsForDevEUIResponse, error)
	// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
	// This also takes device-queue items for the given DevEUI into consideration.
	GetNextDownlinkFCntForDevEUI(ctx context.Context, in *GetNextDownlinkFCntForDevEUIRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntForDevEUIResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
	CreateMACCommandQueueItem(ctx context.Context, in *CreateMACCommandQueueItemRequest, opts ...grpc.CallOption) (*CreateMACCommandQueueItemResponse, error)
	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	SendProprietaryPayload(ctx context.Context, in *SendProprietaryPayloadRequest, opts ...grpc.CallOption) (*SendProprietaryPayloadResponse, error)
	// CreateGateway creates the given gateway.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error)
	// CreateGatewayProfile creates the given gateway-profile.
	CreateGatewayProfile(ctx context.Context, in *CreateGatewayProfileRequest, opts ...grpc.CallOption) (*CreateGatewayProfileResponse, error)
	// GetGatewayProfile returns the gateway-profile given an id.
	GetGatewayProfile(ctx context.Context, in *GetGatewayProfileRequest, opts ...grpc.CallOption) (*GetGatewayProfileResponse, error)
	// UpdateGatewayProfile updates the given gateway-profile.
	UpdateGatewayProfile(ctx context.Context, in *UpdateGatewayProfileRequest, opts ...grpc.CallOption) (*UpdateGatewayProfileResponse, error)
	// DeleteGatewayProfile deletes the gateway-profile matching a given id.
	DeleteGatewayProfile(ctx context.Context, in *DeleteGatewayProfileRequest, opts ...grpc.CallOption) (*DeleteGatewayProfileResponse, error)
	// GetGatewayStats returns stats of an existing gateway.
	GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
	// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
	StreamFrameLogsForGateway(ctx context.Context, in *StreamFrameLogsForGatewayRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForGatewayClient, error)
	// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
	StreamFrameLogsForDevice(ctx context.Context, in *StreamFrameLogsForDeviceRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForDeviceClient, error)
	// GetVersion returns the LoRa Server version.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type networkServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerServiceClient(cc *grpc.ClientConn) NetworkServerServiceClient {
	return &networkServerServiceClient{cc}
}

func (c *networkServerServiceClient) CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error) {
	out := new(CreateServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error) {
	out := new(GetServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateServiceProfile(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*UpdateServiceProfileResponse, error) {
	out := new(UpdateServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/UpdateServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteServiceProfile(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*DeleteServiceProfileResponse, error) {
	out := new(DeleteServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeleteServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateRoutingProfile(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error) {
	out := new(CreateRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetRoutingProfile(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error) {
	out := new(GetRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateRoutingProfile(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*UpdateRoutingProfileResponse, error) {
	out := new(UpdateRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/UpdateRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteRoutingProfile(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*DeleteRoutingProfileResponse, error) {
	out := new(DeleteRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeleteRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateDeviceProfile(ctx context.Context, in *CreateDeviceProfileRequest, opts ...grpc.CallOption) (*CreateDeviceProfileResponse, error) {
	out := new(CreateDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceProfile(ctx context.Context, in *GetDeviceProfileRequest, opts ...grpc.CallOption) (*GetDeviceProfileResponse, error) {
	out := new(GetDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateDeviceProfile(ctx context.Context, in *UpdateDeviceProfileRequest, opts ...grpc.CallOption) (*UpdateDeviceProfileResponse, error) {
	out := new(UpdateDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/UpdateDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteDeviceProfile(ctx context.Context, in *DeleteDeviceProfileRequest, opts ...grpc.CallOption) (*DeleteDeviceProfileResponse, error) {
	out := new(DeleteDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeleteDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/UpdateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) ActivateDevice(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*ActivateDeviceResponse, error) {
	out := new(ActivateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/ActivateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeactivateDevice(ctx context.Context, in *DeactivateDeviceRequest, opts ...grpc.CallOption) (*DeactivateDeviceResponse, error) {
	out := new(DeactivateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeactivateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error) {
	out := new(GetDeviceActivationResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetDeviceActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateDeviceQueueItem(ctx context.Context, in *CreateDeviceQueueItemRequest, opts ...grpc.CallOption) (*CreateDeviceQueueItemResponse, error) {
	out := new(CreateDeviceQueueItemResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateDeviceQueueItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) FlushDeviceQueueForDevEUI(ctx context.Context, in *FlushDeviceQueueForDevEUIRequest, opts ...grpc.CallOption) (*FlushDeviceQueueForDevEUIResponse, error) {
	out := new(FlushDeviceQueueForDevEUIResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/FlushDeviceQueueForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceQueueItemsForDevEUI(ctx context.Context, in *GetDeviceQueueItemsForDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceQueueItemsForDevEUIResponse, error) {
	out := new(GetDeviceQueueItemsForDevEUIResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetDeviceQueueItemsForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetNextDownlinkFCntForDevEUI(ctx context.Context, in *GetNextDownlinkFCntForDevEUIRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntForDevEUIResponse, error) {
	out := new(GetNextDownlinkFCntForDevEUIResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetNextDownlinkFCntForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateMACCommandQueueItem(ctx context.Context, in *CreateMACCommandQueueItemRequest, opts ...grpc.CallOption) (*CreateMACCommandQueueItemResponse, error) {
	out := new(CreateMACCommandQueueItemResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateMACCommandQueueItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) SendProprietaryPayload(ctx context.Context, in *SendProprietaryPayloadRequest, opts ...grpc.CallOption) (*SendProprietaryPayloadResponse, error) {
	out := new(SendProprietaryPayloadResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/SendProprietaryPayload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error) {
	out := new(CreateGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error) {
	out := new(UpdateGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/UpdateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error) {
	out := new(DeleteGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateGatewayProfile(ctx context.Context, in *CreateGatewayProfileRequest, opts ...grpc.CallOption) (*CreateGatewayProfileResponse, error) {
	out := new(CreateGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/CreateGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetGatewayProfile(ctx context.Context, in *GetGatewayProfileRequest, opts ...grpc.CallOption) (*GetGatewayProfileResponse, error) {
	out := new(GetGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateGatewayProfile(ctx context.Context, in *UpdateGatewayProfileRequest, opts ...grpc.CallOption) (*UpdateGatewayProfileResponse, error) {
	out := new(UpdateGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/UpdateGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteGatewayProfile(ctx context.Context, in *DeleteGatewayProfileRequest, opts ...grpc.CallOption) (*DeleteGatewayProfileResponse, error) {
	out := new(DeleteGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/DeleteGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetGatewayStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) StreamFrameLogsForGateway(ctx context.Context, in *StreamFrameLogsForGatewayRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForGatewayClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkServerService_serviceDesc.Streams[0], c.cc, "/ns.NetworkServerService/StreamFrameLogsForGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServerServiceStreamFrameLogsForGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServerService_StreamFrameLogsForGatewayClient interface {
	Recv() (*StreamFrameLogsForGatewayResponse, error)
	grpc.ClientStream
}

type networkServerServiceStreamFrameLogsForGatewayClient struct {
	grpc.ClientStream
}

func (x *networkServerServiceStreamFrameLogsForGatewayClient) Recv() (*StreamFrameLogsForGatewayResponse, error) {
	m := new(StreamFrameLogsForGatewayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServerServiceClient) StreamFrameLogsForDevice(ctx context.Context, in *StreamFrameLogsForDeviceRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForDeviceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkServerService_serviceDesc.Streams[1], c.cc, "/ns.NetworkServerService/StreamFrameLogsForDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServerServiceStreamFrameLogsForDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServerService_StreamFrameLogsForDeviceClient interface {
	Recv() (*StreamFrameLogsForDeviceResponse, error)
	grpc.ClientStream
}

type networkServerServiceStreamFrameLogsForDeviceClient struct {
	grpc.ClientStream
}

func (x *networkServerServiceStreamFrameLogsForDeviceClient) Recv() (*StreamFrameLogsForDeviceResponse, error) {
	m := new(StreamFrameLogsForDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServerServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServerService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServerService service

type NetworkServerServiceServer interface {
	// CreateServiceProfile creates the given service-profile.
	CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error)
	// GetServiceProfile returns the service-profile matching the given id.
	GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error)
	// UpdateServiceProfile updates the given service-profile.
	UpdateServiceProfile(context.Context, *UpdateServiceProfileRequest) (*UpdateServiceProfileResponse, error)
	// DeleteServiceProfile deletes the service-profile matching the given id.
	DeleteServiceProfile(context.Context, *DeleteServiceProfileRequest) (*DeleteServiceProfileResponse, error)
	// CreateRoutingProfile creates the given routing-profile.
	CreateRoutingProfile(context.Context, *CreateRoutingProfileRequest) (*CreateRoutingProfileResponse, error)
	// GetRoutingProfile returns the routing-profile matching the given id.
	GetRoutingProfile(context.Context, *GetRoutingProfileRequest) (*GetRoutingProfileResponse, error)
	// UpdateRoutingProfile updates the given routing-profile.
	UpdateRoutingProfile(context.Context, *UpdateRoutingProfileRequest) (*UpdateRoutingProfileResponse, error)
	// DeleteRoutingProfile deletes the routing-profile matching the given id.
	DeleteRoutingProfile(context.Context, *DeleteRoutingProfileRequest) (*DeleteRoutingProfileResponse, error)
	// CreateDeviceProfile creates the given device-profile.
	CreateDeviceProfile(context.Context, *CreateDeviceProfileRequest) (*CreateDeviceProfileResponse, error)
	// GetDeviceProfile returns the device-profile matching the given id.
	GetDeviceProfile(context.Context, *GetDeviceProfileRequest) (*GetDeviceProfileResponse, error)
	// UpdateDeviceProfile updates the given device-profile.
	UpdateDeviceProfile(context.Context, *UpdateDeviceProfileRequest) (*UpdateDeviceProfileResponse, error)
	// DeleteDeviceProfile deletes the device-profile matching the given id.
	DeleteDeviceProfile(context.Context, *DeleteDeviceProfileRequest) (*DeleteDeviceProfileResponse, error)
	// CreateDevice creates the given device.
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	// GetDevice returns the device matching the given DevEUI.
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	// UpdateDevice updates the given device.
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	// DeleteDevice deletes the device matching the given DevEUI.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	// ActivateDevice activates a device (ABP).
	ActivateDevice(context.Context, *ActivateDeviceRequest) (*ActivateDeviceResponse, error)
	// DeactivateDevice de-activates a device.
	DeactivateDevice(context.Context, *DeactivateDeviceRequest) (*DeactivateDeviceResponse, error)
	// GetDeviceActivation returns the device activation details.
	GetDeviceActivation(context.Context, *GetDeviceActivationRequest) (*GetDeviceActivationResponse, error)
	// CreateDeviceQueueItem creates the given device-queue item.
	CreateDeviceQueueItem(context.Context, *CreateDeviceQueueItemRequest) (*CreateDeviceQueueItemResponse, error)
	// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
	FlushDeviceQueueForDevEUI(context.Context, *FlushDeviceQueueForDevEUIRequest) (*FlushDeviceQueueForDevEUIResponse, error)
	// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
	GetDeviceQueueItemsForDevEUI(context.Context, *GetDeviceQueueItemsForDevEUIRequest) (*GetDeviceQueueItemsForDevEUIResponse, error)
	// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
	// This also takes device-queue items for the given DevEUI into consideration.
	GetNextDownlinkFCntForDevEUI(context.Context, *GetNextDownlinkFCntForDevEUIRequest) (*GetNextDownlinkFCntForDevEUIResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
	// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
	CreateMACCommandQueueItem(context.Context, *CreateMACCommandQueueItemRequest) (*CreateMACCommandQueueItemResponse, error)
	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	SendProprietaryPayload(context.Context, *SendProprietaryPayloadRequest) (*SendProprietaryPayloadResponse, error)
	// CreateGateway creates the given gateway.
	CreateGateway(context.Context, *CreateGatewayRequest) (*CreateGatewayResponse, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*UpdateGatewayResponse, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(context.Context, *DeleteGatewayRequest) (*DeleteGatewayResponse, error)
	// CreateGatewayProfile creates the given gateway-profile.
	CreateGatewayProfile(context.Context, *CreateGatewayProfileRequest) (*CreateGatewayProfileResponse, error)
	// GetGatewayProfile returns the gateway-profile given an id.
	GetGatewayProfile(context.Context, *GetGatewayProfileRequest) (*GetGatewayProfileResponse, error)
	// UpdateGatewayProfile updates the given gateway-profile.
	UpdateGatewayProfile(context.Context, *UpdateGatewayProfileRequest) (*UpdateGatewayProfileResponse, error)
	// DeleteGatewayProfile deletes the gateway-profile matching a given id.
	DeleteGatewayProfile(context.Context, *DeleteGatewayProfileRequest) (*DeleteGatewayProfileResponse, error)
	// GetGatewayStats returns stats of an existing gateway.
	GetGatewayStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
	// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
	StreamFrameLogsForGateway(*StreamFrameLogsForGatewayRequest, NetworkServerService_StreamFrameLogsForGatewayServer) error
	// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
	StreamFrameLogsForDevice(*StreamFrameLogsForDeviceRequest, NetworkServerService_StreamFrameLogsForDeviceServer) error
	// GetVersion returns the LoRa Server version.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
}

func RegisterNetworkServerServiceServer(s *grpc.Server, srv NetworkServerServiceServer) {
	s.RegisterService(&_NetworkServerService_serviceDesc, srv)
}

func _NetworkServerService_CreateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateServiceProfile(ctx, req.(*CreateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetServiceProfile(ctx, req.(*GetServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/UpdateServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateServiceProfile(ctx, req.(*UpdateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeleteServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteServiceProfile(ctx, req.(*DeleteServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateRoutingProfile(ctx, req.(*CreateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetRoutingProfile(ctx, req.(*GetRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/UpdateRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateRoutingProfile(ctx, req.(*UpdateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeleteRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteRoutingProfile(ctx, req.(*DeleteRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateDeviceProfile(ctx, req.(*CreateDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceProfile(ctx, req.(*GetDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/UpdateDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateDeviceProfile(ctx, req.(*UpdateDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeleteDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteDeviceProfile(ctx, req.(*DeleteDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_ActivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).ActivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/ActivateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).ActivateDevice(ctx, req.(*ActivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeactivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeactivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeactivateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeactivateDevice(ctx, req.(*DeactivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetDeviceActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceActivation(ctx, req.(*GetDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateDeviceQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateDeviceQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateDeviceQueueItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateDeviceQueueItem(ctx, req.(*CreateDeviceQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_FlushDeviceQueueForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushDeviceQueueForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).FlushDeviceQueueForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/FlushDeviceQueueForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).FlushDeviceQueueForDevEUI(ctx, req.(*FlushDeviceQueueForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceQueueItemsForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceQueueItemsForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceQueueItemsForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetDeviceQueueItemsForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceQueueItemsForDevEUI(ctx, req.(*GetDeviceQueueItemsForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetNextDownlinkFCntForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextDownlinkFCntForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetNextDownlinkFCntForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetNextDownlinkFCntForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetNextDownlinkFCntForDevEUI(ctx, req.(*GetNextDownlinkFCntForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateMACCommandQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMACCommandQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateMACCommandQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateMACCommandQueueItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateMACCommandQueueItem(ctx, req.(*CreateMACCommandQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_SendProprietaryPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProprietaryPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).SendProprietaryPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/SendProprietaryPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).SendProprietaryPayload(ctx, req.(*SendProprietaryPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteGateway(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/CreateGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateGatewayProfile(ctx, req.(*CreateGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetGatewayProfile(ctx, req.(*GetGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/UpdateGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateGatewayProfile(ctx, req.(*UpdateGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/DeleteGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteGatewayProfile(ctx, req.(*DeleteGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetGatewayStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetGatewayStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_StreamFrameLogsForGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFrameLogsForGatewayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServerServiceServer).StreamFrameLogsForGateway(m, &networkServerServiceStreamFrameLogsForGatewayServer{stream})
}

type NetworkServerService_StreamFrameLogsForGatewayServer interface {
	Send(*StreamFrameLogsForGatewayResponse) error
	grpc.ServerStream
}

type networkServerServiceStreamFrameLogsForGatewayServer struct {
	grpc.ServerStream
}

func (x *networkServerServiceStreamFrameLogsForGatewayServer) Send(m *StreamFrameLogsForGatewayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServerService_StreamFrameLogsForDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFrameLogsForDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServerServiceServer).StreamFrameLogsForDevice(m, &networkServerServiceStreamFrameLogsForDeviceServer{stream})
}

type NetworkServerService_StreamFrameLogsForDeviceServer interface {
	Send(*StreamFrameLogsForDeviceResponse) error
	grpc.ServerStream
}

type networkServerServiceStreamFrameLogsForDeviceServer struct {
	grpc.ServerStream
}

func (x *networkServerServiceStreamFrameLogsForDeviceServer) Send(m *StreamFrameLogsForDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServerService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServerService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ns.NetworkServerService",
	HandlerType: (*NetworkServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceProfile",
			Handler:    _NetworkServerService_CreateServiceProfile_Handler,
		},
		{
			MethodName: "GetServiceProfile",
			Handler:    _NetworkServerService_GetServiceProfile_Handler,
		},
		{
			MethodName: "UpdateServiceProfile",
			Handler:    _NetworkServerService_UpdateServiceProfile_Handler,
		},
		{
			MethodName: "DeleteServiceProfile",
			Handler:    _NetworkServerService_DeleteServiceProfile_Handler,
		},
		{
			MethodName: "CreateRoutingProfile",
			Handler:    _NetworkServerService_CreateRoutingProfile_Handler,
		},
		{
			MethodName: "GetRoutingProfile",
			Handler:    _NetworkServerService_GetRoutingProfile_Handler,
		},
		{
			MethodName: "UpdateRoutingProfile",
			Handler:    _NetworkServerService_UpdateRoutingProfile_Handler,
		},
		{
			MethodName: "DeleteRoutingProfile",
			Handler:    _NetworkServerService_DeleteRoutingProfile_Handler,
		},
		{
			MethodName: "CreateDeviceProfile",
			Handler:    _NetworkServerService_CreateDeviceProfile_Handler,
		},
		{
			MethodName: "GetDeviceProfile",
			Handler:    _NetworkServerService_GetDeviceProfile_Handler,
		},
		{
			MethodName: "UpdateDeviceProfile",
			Handler:    _NetworkServerService_UpdateDeviceProfile_Handler,
		},
		{
			MethodName: "DeleteDeviceProfile",
			Handler:    _NetworkServerService_DeleteDeviceProfile_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _NetworkServerService_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _NetworkServerService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _NetworkServerService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _NetworkServerService_DeleteDevice_Handler,
		},
		{
			MethodName: "ActivateDevice",
			Handler:    _NetworkServerService_ActivateDevice_Handler,
		},
		{
			MethodName: "DeactivateDevice",
			Handler:    _NetworkServerService_DeactivateDevice_Handler,
		},
		{
			MethodName: "GetDeviceActivation",
			Handler:    _NetworkServerService_GetDeviceActivation_Handler,
		},
		{
			MethodName: "CreateDeviceQueueItem",
			Handler:    _NetworkServerService_CreateDeviceQueueItem_Handler,
		},
		{
			MethodName: "FlushDeviceQueueForDevEUI",
			Handler:    _NetworkServerService_FlushDeviceQueueForDevEUI_Handler,
		},
		{
			MethodName: "GetDeviceQueueItemsForDevEUI",
			Handler:    _NetworkServerService_GetDeviceQueueItemsForDevEUI_Handler,
		},
		{
			MethodName: "GetNextDownlinkFCntForDevEUI",
			Handler:    _NetworkServerService_GetNextDownlinkFCntForDevEUI_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _NetworkServerService_GetRandomDevAddr_Handler,
		},
		{
			MethodName: "CreateMACCommandQueueItem",
			Handler:    _NetworkServerService_CreateMACCommandQueueItem_Handler,
		},
		{
			MethodName: "SendProprietaryPayload",
			Handler:    _NetworkServerService_SendProprietaryPayload_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _NetworkServerService_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _NetworkServerService_GetGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _NetworkServerService_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _NetworkServerService_DeleteGateway_Handler,
		},
		{
			MethodName: "CreateGatewayProfile",
			Handler:    _NetworkServerService_CreateGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayProfile",
			Handler:    _NetworkServerService_GetGatewayProfile_Handler,
		},
		{
			MethodName: "UpdateGatewayProfile",
			Handler:    _NetworkServerService_UpdateGatewayProfile_Handler,
		},
		{
			MethodName: "DeleteGatewayProfile",
			Handler:    _NetworkServerService_DeleteGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayStats",
			Handler:    _NetworkServerService_GetGatewayStats_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _NetworkServerService_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrameLogsForGateway",
			Handler:       _NetworkServerService_StreamFrameLogsForGateway_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamFrameLogsForDevice",
			Handler:       _NetworkServerService_StreamFrameLogsForDevice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ns.proto",
}

func (m *CreateServiceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServiceProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.ServiceProfile.Size()))
		n1, err := m.ServiceProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateServiceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n2, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *GetServiceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n3, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *GetServiceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServiceProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.ServiceProfile.Size()))
		n4, err := m.ServiceProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CreatedAtUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.UpdatedAtUnixNS))
	}
	return i, nil
}

func (m *UpdateServiceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServiceProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.ServiceProfile.Size()))
		n5, err := m.ServiceProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UpdateServiceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteServiceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteServiceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n6, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *DeleteServiceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteServiceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateRoutingProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoutingProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoutingProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.RoutingProfile.Size()))
		n7, err := m.RoutingProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CreateRoutingProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoutingProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n8, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *GetRoutingProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoutingProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n9, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *GetRoutingProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoutingProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoutingProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.RoutingProfile.Size()))
		n10, err := m.RoutingProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.CreatedAtUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.UpdatedAtUnixNS))
	}
	return i, nil
}

func (m *UpdateRoutingProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoutingProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoutingProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.RoutingProfile.Size()))
		n11, err := m.RoutingProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UpdateRoutingProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoutingProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteRoutingProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoutingProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n12, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *DeleteRoutingProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoutingProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateDeviceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeviceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DeviceProfile.Size()))
		n13, err := m.DeviceProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *CreateDeviceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeviceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n14, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *GetDeviceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n15, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *GetDeviceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DeviceProfile.Size()))
		n16, err := m.DeviceProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.CreatedAtUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.UpdatedAtUnixNS))
	}
	return i, nil
}

func (m *UpdateDeviceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DeviceProfile.Size()))
		n17, err := m.DeviceProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *UpdateDeviceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteDeviceProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDeviceProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n18, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *DeleteDeviceProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDeviceProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n19, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DeviceProfileID.Size()))
	n20, err := m.DeviceProfileID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ServiceProfileID.Size()))
	n21, err := m.ServiceProfileID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x22
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.RoutingProfileID.Size()))
	n22, err := m.RoutingProfileID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if m.SkipFCntCheck {
		dAtA[i] = 0x28
		i++
		if m.SkipFCntCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Device.Size()))
		n23, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *CreateDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n24, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	return i, nil
}

func (m *GetDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Device.Size()))
		n25, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.CreatedAtUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.UpdatedAtUnixNS))
	}
	return i, nil
}

func (m *UpdateDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Device.Size()))
		n26, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *UpdateDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n27, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	return i, nil
}

func (m *DeleteDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeviceActivation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceActivation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n28, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x12
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevAddr.Size()))
	n29, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.SNwkSIntKey.Size()))
	n30, err := m.SNwkSIntKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x22
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.FNwkSIntKey.Size()))
	n31, err := m.FNwkSIntKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x2a
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.NwkSEncKey.Size()))
	n32, err := m.NwkSEncKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if m.FCntUp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.FCntUp))
	}
	if m.NFCntDown != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.NFCntDown))
	}
	if m.AFCntDown != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.AFCntDown))
	}
	if m.SkipFCntCheck {
		dAtA[i] = 0x48
		i++
		if m.SkipFCntCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ActivateDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceActivation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DeviceActivation.Size()))
		n33, err := m.DeviceActivation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ActivateDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeactivateDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n34, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	return i, nil
}

func (m *DeactivateDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetDeviceActivationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceActivationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n35, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	return i, nil
}

func (m *GetDeviceActivationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceActivationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceActivation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DeviceActivation.Size()))
		n36, err := m.DeviceActivation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *GetRandomDevAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomDevAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRandomDevAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomDevAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevAddr.Size()))
	n37, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	return i, nil
}

func (m *CreateMACCommandQueueItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMACCommandQueueItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n38, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	if m.Cid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Cid))
	}
	if len(m.Commands) > 0 {
		for _, b := range m.Commands {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintNs(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CreateMACCommandQueueItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMACCommandQueueItemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SendProprietaryPayloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendProprietaryPayloadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MacPayload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.MacPayload)))
		i += copy(dAtA[i:], m.MacPayload)
	}
	if len(m.Mic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.Mic)))
		i += copy(dAtA[i:], m.Mic)
	}
	if len(m.GatewayMacs) > 0 {
		for _, b := range m.GatewayMacs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNs(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.PolarizationInversion {
		dAtA[i] = 0x20
		i++
		if m.PolarizationInversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Frequency))
	}
	if m.Dr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Dr))
	}
	return i, nil
}

func (m *SendProprietaryPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendProprietaryPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n39, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Altitude))))
		i += 8
	}
	if m.GatewayProfileID != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.GatewayProfileID.Size()))
		n40, err := m.GatewayProfileID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *CreateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gateway != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Gateway.Size()))
		n41, err := m.Gateway.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *CreateGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n42, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	return i, nil
}

func (m *GetGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gateway != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Gateway.Size()))
		n43, err := m.Gateway.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.CreatedAtUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.UpdatedAtUnixNS))
	}
	if m.FirstSeenAtUnixNS != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.FirstSeenAtUnixNS))
	}
	if m.LastSeenAtUnixNS != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.LastSeenAtUnixNS))
	}
	return i, nil
}

func (m *UpdateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gateway != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Gateway.Size()))
		n44, err := m.Gateway.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *UpdateGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n45, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	return i, nil
}

func (m *DeleteGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GatewayStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimestampUnixNS != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.TimestampUnixNS))
	}
	if m.RXPacketsReceived != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.RXPacketsReceived))
	}
	if m.RXPacketsReceivedOK != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.RXPacketsReceivedOK))
	}
	if m.TXPacketsReceived != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.TXPacketsReceived))
	}
	if m.TXPacketsEmitted != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.TXPacketsEmitted))
	}
	return i, nil
}

func (m *GetGatewayStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n46, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	if m.Interval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Interval))
	}
	if m.StartTimestampUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.StartTimestampUnixNS))
	}
	if m.EndTimestampUnixNS != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.EndTimestampUnixNS))
	}
	return i, nil
}

func (m *GetGatewayStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeviceQueueItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceQueueItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n47, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	if len(m.FrmPayload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.FrmPayload)))
		i += copy(dAtA[i:], m.FrmPayload)
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.FCnt))
	}
	if m.FPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.FPort))
	}
	if m.Confirmed {
		dAtA[i] = 0x28
		i++
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateDeviceQueueItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeviceQueueItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Item.Size()))
		n48, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *CreateDeviceQueueItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeviceQueueItemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FlushDeviceQueueForDevEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushDeviceQueueForDevEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n49, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	return i, nil
}

func (m *FlushDeviceQueueForDevEUIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushDeviceQueueForDevEUIResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetDeviceQueueItemsForDevEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceQueueItemsForDevEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n50, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	return i, nil
}

func (m *GetDeviceQueueItemsForDevEUIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceQueueItemsForDevEUIResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetNextDownlinkFCntForDevEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextDownlinkFCntForDevEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n51, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	return i, nil
}

func (m *GetNextDownlinkFCntForDevEUIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextDownlinkFCntForDevEUIResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FCnt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.FCnt))
	}
	return i, nil
}

func (m *StreamFrameLogsForGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamFrameLogsForGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.GatewayID.Size()))
	n52, err := m.GatewayID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	return i, nil
}

func (m *StreamFrameLogsForGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamFrameLogsForGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UplinkFrames) > 0 {
		for _, msg := range m.UplinkFrames {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DownlinkFrames) > 0 {
		for _, msg := range m.DownlinkFrames {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StreamFrameLogsForDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamFrameLogsForDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.DevEUI.Size()))
	n53, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	return i, nil
}

func (m *StreamFrameLogsForDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamFrameLogsForDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UplinkFrames) > 0 {
		for _, msg := range m.UplinkFrames {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DownlinkFrames) > 0 {
		for _, msg := range m.DownlinkFrames {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DataRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Modulation) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.Modulation)))
		i += copy(dAtA[i:], m.Modulation)
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.SpreadingFactor))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Bitrate))
	}
	return i, nil
}

func (m *UplinkTXInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkTXInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Frequency))
	}
	if m.DataRate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DataRate.Size()))
		n54, err := m.DataRate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if len(m.CodeRate) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.CodeRate)))
		i += copy(dAtA[i:], m.CodeRate)
	}
	return i, nil
}

func (m *UplinkRXInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkRXInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.GatewayID.Size()))
	n55, err := m.GatewayID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n55
	if m.TimeUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.TimeUnixNS))
	}
	if m.NSSinceGPSEpoch != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.NSSinceGPSEpoch))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Timestamp))
	}
	if m.RSSI != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.RSSI))
	}
	if m.LoRaSNR != 0 {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LoRaSNR))))
		i += 4
	}
	if m.Board != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Board))
	}
	if m.Antenna != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Antenna))
	}
	return i, nil
}

func (m *UplinkFrameLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkFrameLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TXInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.TXInfo.Size()))
		n56, err := m.TXInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if len(m.RXInfo) > 0 {
		for _, msg := range m.RXInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PHYPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.PHYPayload)))
		i += copy(dAtA[i:], m.PHYPayload)
	}
	return i, nil
}

func (m *DownlinkTXInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkTXInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.GatewayID.Size()))
	n57, err := m.GatewayID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n57
	if m.Immediately {
		dAtA[i] = 0x10
		i++
		if m.Immediately {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NSSinceGPSEpoch != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.NSSinceGPSEpoch))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Timestamp))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Frequency))
	}
	if m.Power != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Power))
	}
	if m.DataRate != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.DataRate.Size()))
		n58, err := m.DataRate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if len(m.CodeRate) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.CodeRate)))
		i += copy(dAtA[i:], m.CodeRate)
	}
	if m.PolarizationInversion {
		dAtA[i] = 0x48
		i++
		if m.PolarizationInversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Board != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Board))
	}
	if m.Antenna != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Antenna))
	}
	return i, nil
}

func (m *DownlinkFrameLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkFrameLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TXInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.TXInfo.Size()))
		n59, err := m.TXInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if len(m.PHYPayload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.PHYPayload)))
		i += copy(dAtA[i:], m.PHYPayload)
	}
	return i, nil
}

func (m *GetVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Region != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Region))
	}
	return i, nil
}

func (m *GatewayProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n60, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n60
	if len(m.Channels) > 0 {
		dAtA62 := make([]byte, len(m.Channels)*10)
		var j61 int
		for _, num := range m.Channels {
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintNs(dAtA, i, uint64(j61))
		i += copy(dAtA[i:], dAtA62[:j61])
	}
	if len(m.ExtraChannels) > 0 {
		for _, msg := range m.ExtraChannels {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GatewayProfileExtraChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayProfileExtraChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Modulation))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Frequency))
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Bandwidth))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.Bitrate))
	}
	if len(m.SpreadingFactors) > 0 {
		dAtA64 := make([]byte, len(m.SpreadingFactors)*10)
		var j63 int
		for _, num := range m.SpreadingFactors {
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNs(dAtA, i, uint64(j63))
		i += copy(dAtA[i:], dAtA64[:j63])
	}
	return i, nil
}

func (m *CreateGatewayProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GatewayProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.GatewayProfile.Size()))
		n65, err := m.GatewayProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *CreateGatewayProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGatewayProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n66, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n66
	return i, nil
}

func (m *GetGatewayProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n67, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n67
	return i, nil
}

func (m *GetGatewayProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GatewayProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.GatewayProfile.Size()))
		n68, err := m.GatewayProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.CreatedAtUnixNS != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.UpdatedAtUnixNS))
	}
	return i, nil
}

func (m *UpdateGatewayProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GatewayProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNs(dAtA, i, uint64(m.GatewayProfile.Size()))
		n69, err := m.GatewayProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *UpdateGatewayProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteGatewayProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGatewayProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNs(dAtA, i, uint64(m.ID.Size()))
	n70, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n70
	return i, nil
}

func (m *DeleteGatewayProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGatewayProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintNs(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateServiceProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.ServiceProfile != nil {
		l = m.ServiceProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateServiceProfileResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetServiceProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetServiceProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.ServiceProfile != nil {
		l = m.ServiceProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if m.CreatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.UpdatedAtUnixNS))
	}
	return n
}

func (m *UpdateServiceProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.ServiceProfile != nil {
		l = m.ServiceProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UpdateServiceProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteServiceProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeleteServiceProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateRoutingProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.RoutingProfile != nil {
		l = m.RoutingProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateRoutingProfileResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetRoutingProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetRoutingProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.RoutingProfile != nil {
		l = m.RoutingProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if m.CreatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.UpdatedAtUnixNS))
	}
	return n
}

func (m *UpdateRoutingProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.RoutingProfile != nil {
		l = m.RoutingProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UpdateRoutingProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteRoutingProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeleteRoutingProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateDeviceProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.DeviceProfile != nil {
		l = m.DeviceProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateDeviceProfileResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetDeviceProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetDeviceProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.DeviceProfile != nil {
		l = m.DeviceProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if m.CreatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.UpdatedAtUnixNS))
	}
	return n
}

func (m *UpdateDeviceProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.DeviceProfile != nil {
		l = m.DeviceProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UpdateDeviceProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteDeviceProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeleteDeviceProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Device) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.DeviceProfileID.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.ServiceProfileID.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.RoutingProfileID.Size()
	n += 1 + l + sovNs(uint64(l))
	if m.SkipFCntCheck {
		n += 2
	}
	return n
}

func (m *CreateDeviceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateDeviceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetDeviceResponse) Size() (n int) {
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if m.CreatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.UpdatedAtUnixNS))
	}
	return n
}

func (m *UpdateDeviceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UpdateDeviceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeleteDeviceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeviceActivation) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.SNwkSIntKey.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.FNwkSIntKey.Size()
	n += 1 + l + sovNs(uint64(l))
	l = m.NwkSEncKey.Size()
	n += 1 + l + sovNs(uint64(l))
	if m.FCntUp != 0 {
		n += 1 + sovNs(uint64(m.FCntUp))
	}
	if m.NFCntDown != 0 {
		n += 1 + sovNs(uint64(m.NFCntDown))
	}
	if m.AFCntDown != 0 {
		n += 1 + sovNs(uint64(m.AFCntDown))
	}
	if m.SkipFCntCheck {
		n += 2
	}
	return n
}

func (m *ActivateDeviceRequest) Size() (n int) {
	var l int
	_ = l
	if m.DeviceActivation != nil {
		l = m.DeviceActivation.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *ActivateDeviceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeactivateDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeactivateDeviceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetDeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetDeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	if m.DeviceActivation != nil {
		l = m.DeviceActivation.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *GetRandomDevAddrRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetRandomDevAddrResponse) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *CreateMACCommandQueueItemRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	if m.Cid != 0 {
		n += 1 + sovNs(uint64(m.Cid))
	}
	if len(m.Commands) > 0 {
		for _, b := range m.Commands {
			l = len(b)
			n += 1 + l + sovNs(uint64(l))
		}
	}
	return n
}

func (m *CreateMACCommandQueueItemResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SendProprietaryPayloadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.MacPayload)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	l = len(m.Mic)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	if len(m.GatewayMacs) > 0 {
		for _, b := range m.GatewayMacs {
			l = len(b)
			n += 1 + l + sovNs(uint64(l))
		}
	}
	if m.PolarizationInversion {
		n += 2
	}
	if m.Frequency != 0 {
		n += 1 + sovNs(uint64(m.Frequency))
	}
	if m.Dr != 0 {
		n += 1 + sovNs(uint64(m.Dr))
	}
	return n
}

func (m *SendProprietaryPayloadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Gateway) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.Altitude != 0 {
		n += 9
	}
	if m.GatewayProfileID != nil {
		l = m.GatewayProfileID.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	if m.Gateway != nil {
		l = m.Gateway.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateGatewayResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetGatewayResponse) Size() (n int) {
	var l int
	_ = l
	if m.Gateway != nil {
		l = m.Gateway.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if m.CreatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.UpdatedAtUnixNS))
	}
	if m.FirstSeenAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.FirstSeenAtUnixNS))
	}
	if m.LastSeenAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.LastSeenAtUnixNS))
	}
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	var l int
	_ = l
	if m.Gateway != nil {
		l = m.Gateway.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UpdateGatewayResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeleteGatewayResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GatewayStats) Size() (n int) {
	var l int
	_ = l
	if m.TimestampUnixNS != 0 {
		n += 1 + sovNs(uint64(m.TimestampUnixNS))
	}
	if m.RXPacketsReceived != 0 {
		n += 1 + sovNs(uint64(m.RXPacketsReceived))
	}
	if m.RXPacketsReceivedOK != 0 {
		n += 1 + sovNs(uint64(m.RXPacketsReceivedOK))
	}
	if m.TXPacketsReceived != 0 {
		n += 1 + sovNs(uint64(m.TXPacketsReceived))
	}
	if m.TXPacketsEmitted != 0 {
		n += 1 + sovNs(uint64(m.TXPacketsEmitted))
	}
	return n
}

func (m *GetGatewayStatsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	if m.Interval != 0 {
		n += 1 + sovNs(uint64(m.Interval))
	}
	if m.StartTimestampUnixNS != 0 {
		n += 1 + sovNs(uint64(m.StartTimestampUnixNS))
	}
	if m.EndTimestampUnixNS != 0 {
		n += 1 + sovNs(uint64(m.EndTimestampUnixNS))
	}
	return n
}

func (m *GetGatewayStatsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	return n
}

func (m *DeviceQueueItem) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	l = len(m.FrmPayload)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovNs(uint64(m.FCnt))
	}
	if m.FPort != 0 {
		n += 1 + sovNs(uint64(m.FPort))
	}
	if m.Confirmed {
		n += 2
	}
	return n
}

func (m *CreateDeviceQueueItemRequest) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateDeviceQueueItemResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FlushDeviceQueueForDevEUIRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *FlushDeviceQueueForDevEUIResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetDeviceQueueItemsForDevEUIRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetDeviceQueueItemsForDevEUIResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	return n
}

func (m *GetNextDownlinkFCntForDevEUIRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetNextDownlinkFCntForDevEUIResponse) Size() (n int) {
	var l int
	_ = l
	if m.FCnt != 0 {
		n += 1 + sovNs(uint64(m.FCnt))
	}
	return n
}

func (m *StreamFrameLogsForGatewayRequest) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *StreamFrameLogsForGatewayResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.UplinkFrames) > 0 {
		for _, e := range m.UplinkFrames {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	if len(m.DownlinkFrames) > 0 {
		for _, e := range m.DownlinkFrames {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	return n
}

func (m *StreamFrameLogsForDeviceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevEUI.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *StreamFrameLogsForDeviceResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.UplinkFrames) > 0 {
		for _, e := range m.UplinkFrames {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	if len(m.DownlinkFrames) > 0 {
		for _, e := range m.DownlinkFrames {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	return n
}

func (m *DataRate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Modulation)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovNs(uint64(m.Bandwidth))
	}
	if m.SpreadingFactor != 0 {
		n += 1 + sovNs(uint64(m.SpreadingFactor))
	}
	if m.Bitrate != 0 {
		n += 1 + sovNs(uint64(m.Bitrate))
	}
	return n
}

func (m *UplinkTXInfo) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovNs(uint64(m.Frequency))
	}
	if m.DataRate != nil {
		l = m.DataRate.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	l = len(m.CodeRate)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UplinkRXInfo) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayID.Size()
	n += 1 + l + sovNs(uint64(l))
	if m.TimeUnixNS != 0 {
		n += 1 + sovNs(uint64(m.TimeUnixNS))
	}
	if m.NSSinceGPSEpoch != 0 {
		n += 1 + sovNs(uint64(m.NSSinceGPSEpoch))
	}
	if m.Timestamp != 0 {
		n += 1 + sovNs(uint64(m.Timestamp))
	}
	if m.RSSI != 0 {
		n += 1 + sovNs(uint64(m.RSSI))
	}
	if m.LoRaSNR != 0 {
		n += 5
	}
	if m.Board != 0 {
		n += 1 + sovNs(uint64(m.Board))
	}
	if m.Antenna != 0 {
		n += 1 + sovNs(uint64(m.Antenna))
	}
	return n
}

func (m *UplinkFrameLog) Size() (n int) {
	var l int
	_ = l
	if m.TXInfo != nil {
		l = m.TXInfo.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if len(m.RXInfo) > 0 {
		for _, e := range m.RXInfo {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	l = len(m.PHYPayload)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *DownlinkTXInfo) Size() (n int) {
	var l int
	_ = l
	l = m.GatewayID.Size()
	n += 1 + l + sovNs(uint64(l))
	if m.Immediately {
		n += 2
	}
	if m.NSSinceGPSEpoch != 0 {
		n += 1 + sovNs(uint64(m.NSSinceGPSEpoch))
	}
	if m.Timestamp != 0 {
		n += 1 + sovNs(uint64(m.Timestamp))
	}
	if m.Frequency != 0 {
		n += 1 + sovNs(uint64(m.Frequency))
	}
	if m.Power != 0 {
		n += 1 + sovNs(uint64(m.Power))
	}
	if m.DataRate != nil {
		l = m.DataRate.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	l = len(m.CodeRate)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	if m.PolarizationInversion {
		n += 2
	}
	if m.Board != 0 {
		n += 1 + sovNs(uint64(m.Board))
	}
	if m.Antenna != 0 {
		n += 1 + sovNs(uint64(m.Antenna))
	}
	return n
}

func (m *DownlinkFrameLog) Size() (n int) {
	var l int
	_ = l
	if m.TXInfo != nil {
		l = m.TXInfo.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	l = len(m.PHYPayload)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *GetVersionRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetVersionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNs(uint64(l))
	}
	if m.Region != 0 {
		n += 1 + sovNs(uint64(m.Region))
	}
	return n
}

func (m *GatewayProfile) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	if len(m.Channels) > 0 {
		l = 0
		for _, e := range m.Channels {
			l += sovNs(uint64(e))
		}
		n += 1 + sovNs(uint64(l)) + l
	}
	if len(m.ExtraChannels) > 0 {
		for _, e := range m.ExtraChannels {
			l = e.Size()
			n += 1 + l + sovNs(uint64(l))
		}
	}
	return n
}

func (m *GatewayProfileExtraChannel) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovNs(uint64(m.Modulation))
	}
	if m.Frequency != 0 {
		n += 1 + sovNs(uint64(m.Frequency))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovNs(uint64(m.Bandwidth))
	}
	if m.Bitrate != 0 {
		n += 1 + sovNs(uint64(m.Bitrate))
	}
	if len(m.SpreadingFactors) > 0 {
		l = 0
		for _, e := range m.SpreadingFactors {
			l += sovNs(uint64(e))
		}
		n += 1 + sovNs(uint64(l)) + l
	}
	return n
}

func (m *CreateGatewayProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.GatewayProfile != nil {
		l = m.GatewayProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *CreateGatewayProfileResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetGatewayProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *GetGatewayProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.GatewayProfile != nil {
		l = m.GatewayProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	if m.CreatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.CreatedAtUnixNS))
	}
	if m.UpdatedAtUnixNS != 0 {
		n += 1 + sovNs(uint64(m.UpdatedAtUnixNS))
	}
	return n
}

func (m *UpdateGatewayProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.GatewayProfile != nil {
		l = m.GatewayProfile.Size()
		n += 1 + l + sovNs(uint64(l))
	}
	return n
}

func (m *UpdateGatewayProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteGatewayProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovNs(uint64(l))
	return n
}

func (m *DeleteGatewayProfileResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovNs(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNs(x uint64) (n int) {
	return sovNs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateServiceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceProfile == nil {
				m.ServiceProfile = &ServiceProfile{}
			}
			if err := m.ServiceProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceProfile == nil {
				m.ServiceProfile = &ServiceProfile{}
			}
			if err := m.ServiceProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtUnixNS", wireType)
			}
			m.CreatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtUnixNS", wireType)
			}
			m.UpdatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServiceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceProfile == nil {
				m.ServiceProfile = &ServiceProfile{}
			}
			if err := m.ServiceProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServiceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteServiceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteServiceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteServiceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteServiceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteServiceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteServiceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoutingProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoutingProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoutingProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingProfile == nil {
				m.RoutingProfile = &RoutingProfile{}
			}
			if err := m.RoutingProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoutingProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoutingProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoutingProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoutingProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoutingProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoutingProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoutingProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoutingProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoutingProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingProfile == nil {
				m.RoutingProfile = &RoutingProfile{}
			}
			if err := m.RoutingProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtUnixNS", wireType)
			}
			m.CreatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtUnixNS", wireType)
			}
			m.UpdatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoutingProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoutingProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoutingProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingProfile == nil {
				m.RoutingProfile = &RoutingProfile{}
			}
			if err := m.RoutingProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoutingProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoutingProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoutingProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoutingProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoutingProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoutingProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoutingProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoutingProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoutingProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeviceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeviceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeviceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceProfile == nil {
				m.DeviceProfile = &DeviceProfile{}
			}
			if err := m.DeviceProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeviceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeviceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeviceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceProfile == nil {
				m.DeviceProfile = &DeviceProfile{}
			}
			if err := m.DeviceProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtUnixNS", wireType)
			}
			m.CreatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtUnixNS", wireType)
			}
			m.UpdatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceProfile == nil {
				m.DeviceProfile = &DeviceProfile{}
			}
			if err := m.DeviceProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDeviceProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDeviceProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDeviceProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDeviceProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDeviceProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDeviceProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceProfileID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeviceProfileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProfileID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceProfileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingProfileID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoutingProfileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipFCntCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipFCntCheck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtUnixNS", wireType)
			}
			m.CreatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtUnixNS", wireType)
			}
			m.UpdatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNwkSIntKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SNwkSIntKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FNwkSIntKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FNwkSIntKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSEncKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NwkSEncKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntUp", wireType)
			}
			m.FCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFCntDown", wireType)
			}
			m.NFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AFCntDown", wireType)
			}
			m.AFCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AFCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipFCntCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipFCntCheck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceActivation == nil {
				m.DeviceActivation = &DeviceActivation{}
			}
			if err := m.DeviceActivation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceActivationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceActivationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceActivation == nil {
				m.DeviceActivation = &DeviceActivation{}
			}
			if err := m.DeviceActivation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomDevAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomDevAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomDevAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomDevAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomDevAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomDevAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMACCommandQueueItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMACCommandQueueItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMACCommandQueueItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, make([]byte, postIndex-iNdEx))
			copy(m.Commands[len(m.Commands)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMACCommandQueueItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMACCommandQueueItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMACCommandQueueItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendProprietaryPayloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendProprietaryPayloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendProprietaryPayloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacPayload = append(m.MacPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.MacPayload == nil {
				m.MacPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mic = append(m.Mic[:0], dAtA[iNdEx:postIndex]...)
			if m.Mic == nil {
				m.Mic = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMacs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayMacs = append(m.GatewayMacs, make([]byte, postIndex-iNdEx))
			copy(m.GatewayMacs[len(m.GatewayMacs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dr", wireType)
			}
			m.Dr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendProprietaryPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendProprietaryPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendProprietaryPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Altitude = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayProfileID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_brocaar_loraserver_api_types.UUID
			m.GatewayProfileID = &v
			if err := m.GatewayProfileID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateway == nil {
				m.Gateway = &Gateway{}
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateway == nil {
				m.Gateway = &Gateway{}
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtUnixNS", wireType)
			}
			m.CreatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtUnixNS", wireType)
			}
			m.UpdatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenAtUnixNS", wireType)
			}
			m.FirstSeenAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstSeenAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAtUnixNS", wireType)
			}
			m.LastSeenAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateway == nil {
				m.Gateway = &Gateway{}
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampUnixNS", wireType)
			}
			m.TimestampUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RXPacketsReceived", wireType)
			}
			m.RXPacketsReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RXPacketsReceived |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RXPacketsReceivedOK", wireType)
			}
			m.RXPacketsReceivedOK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RXPacketsReceivedOK |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXPacketsReceived", wireType)
			}
			m.TXPacketsReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TXPacketsReceived |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXPacketsEmitted", wireType)
			}
			m.TXPacketsEmitted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TXPacketsEmitted |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (AggregationInterval(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestampUnixNS", wireType)
			}
			m.StartTimestampUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestampUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestampUnixNS", wireType)
			}
			m.EndTimestampUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestampUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GatewayStats{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceQueueItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceQueueItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceQueueItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrmPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrmPayload = append(m.FrmPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FrmPayload == nil {
				m.FrmPayload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeviceQueueItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeviceQueueItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeviceQueueItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &DeviceQueueItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeviceQueueItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeviceQueueItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeviceQueueItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushDeviceQueueForDevEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushDeviceQueueForDevEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushDeviceQueueForDevEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushDeviceQueueForDevEUIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushDeviceQueueForDevEUIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushDeviceQueueForDevEUIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceQueueItemsForDevEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceQueueItemsForDevEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceQueueItemsForDevEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceQueueItemsForDevEUIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceQueueItemsForDevEUIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceQueueItemsForDevEUIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DeviceQueueItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextDownlinkFCntForDevEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextDownlinkFCntForDevEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextDownlinkFCntForDevEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextDownlinkFCntForDevEUIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextDownlinkFCntForDevEUIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextDownlinkFCntForDevEUIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamFrameLogsForGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamFrameLogsForGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamFrameLogsForGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamFrameLogsForGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamFrameLogsForGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamFrameLogsForGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkFrames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UplinkFrames = append(m.UplinkFrames, &UplinkFrameLog{})
			if err := m.UplinkFrames[len(m.UplinkFrames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFrames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkFrames = append(m.DownlinkFrames, &DownlinkFrameLog{})
			if err := m.DownlinkFrames[len(m.DownlinkFrames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamFrameLogsForDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamFrameLogsForDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamFrameLogsForDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamFrameLogsForDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamFrameLogsForDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamFrameLogsForDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkFrames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UplinkFrames = append(m.UplinkFrames, &UplinkFrameLog{})
			if err := m.UplinkFrames[len(m.UplinkFrames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkFrames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkFrames = append(m.DownlinkFrames, &DownlinkFrameLog{})
			if err := m.DownlinkFrames[len(m.DownlinkFrames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modulation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactor", wireType)
			}
			m.SpreadingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadingFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkTXInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkTXInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkTXInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRate == nil {
				m.DataRate = &DataRate{}
			}
			if err := m.DataRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkRXInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkRXInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkRXInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUnixNS", wireType)
			}
			m.TimeUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSSinceGPSEpoch", wireType)
			}
			m.NSSinceGPSEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSSinceGPSEpoch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSI", wireType)
			}
			m.RSSI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RSSI |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaSNR", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LoRaSNR = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
			m.Board = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Board |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antenna", wireType)
			}
			m.Antenna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Antenna |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkFrameLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkFrameLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkFrameLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TXInfo == nil {
				m.TXInfo = &UplinkTXInfo{}
			}
			if err := m.TXInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RXInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RXInfo = append(m.RXInfo, &UplinkRXInfo{})
			if err := m.RXInfo[len(m.RXInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PHYPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PHYPayload = append(m.PHYPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.PHYPayload == nil {
				m.PHYPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkTXInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkTXInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkTXInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immediately", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Immediately = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSSinceGPSEpoch", wireType)
			}
			m.NSSinceGPSEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSSinceGPSEpoch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRate == nil {
				m.DataRate = &DataRate{}
			}
			if err := m.DataRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
			m.Board = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Board |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antenna", wireType)
			}
			m.Antenna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Antenna |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkFrameLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkFrameLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkFrameLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TXInfo == nil {
				m.TXInfo = &DownlinkTXInfo{}
			}
			if err := m.TXInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PHYPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PHYPayload = append(m.PHYPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.PHYPayload == nil {
				m.PHYPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= (Region(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channels = append(m.Channels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channels = append(m.Channels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraChannels = append(m.ExtraChannels, &GatewayProfileExtraChannel{})
			if err := m.ExtraChannels[len(m.ExtraChannels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayProfileExtraChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayProfileExtraChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayProfileExtraChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpreadingFactors = append(m.SpreadingFactors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpreadingFactors = append(m.SpreadingFactors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactors", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayProfile == nil {
				m.GatewayProfile = &GatewayProfile{}
			}
			if err := m.GatewayProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGatewayProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGatewayProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGatewayProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayProfile == nil {
				m.GatewayProfile = &GatewayProfile{}
			}
			if err := m.GatewayProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtUnixNS", wireType)
			}
			m.CreatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtUnixNS", wireType)
			}
			m.UpdatedAtUnixNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtUnixNS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayProfile == nil {
				m.GatewayProfile = &GatewayProfile{}
			}
			if err := m.GatewayProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGatewayProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGatewayProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGatewayProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNs
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGatewayProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGatewayProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGatewayProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNs
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNs
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNs(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNs = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNs   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ns.proto", fileDescriptorNs) }

var fileDescriptorNs = []byte{
	// 3453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0x4b, 0x73, 0x1b, 0xc7,
	0xd1, 0x04, 0x48, 0x10, 0x60, 0x93, 0x04, 0x97, 0xc3, 0x17, 0x04, 0x51, 0x04, 0xb5, 0xb2, 0x3f,
	0xd3, 0xfa, 0x62, 0x3d, 0xa8, 0xb7, 0x5d, 0x2e, 0x87, 0x24, 0x40, 0x09, 0x91, 0x44, 0xca, 0x03,
	0xc1, 0x96, 0xed, 0x24, 0xeb, 0x25, 0x76, 0x40, 0xae, 0x09, 0xec, 0x22, 0xbb, 0x0b, 0x3e, 0x12,
	0x57, 0xe5, 0x92, 0x53, 0xaa, 0xf2, 0x07, 0x92, 0x7f, 0x90, 0x4b, 0x6e, 0xb9, 0xe4, 0x90, 0xab,
	0x4f, 0x49, 0x4e, 0x2e, 0x97, 0x2b, 0xc5, 0x4a, 0xf1, 0x0f, 0x24, 0xd7, 0xdc, 0x52, 0xf3, 0xd8,
	0x27, 0x77, 0x41, 0x85, 0x22, 0x14, 0xdd, 0x66, 0xbb, 0x67, 0xfa, 0x35, 0xdd, 0x3d, 0x3d, 0x83,
	0x06, 0xe4, 0x0c, 0xfb, 0x5a, 0xc7, 0x32, 0x1d, 0x13, 0xa5, 0x0d, 0xbb, 0xf8, 0xde, 0xb6, 0xee,
	0xec, 0x74, 0xb7, 0xae, 0x35, 0xcc, 0xf6, 0xf5, 0x6d, 0x73, 0xdb, 0xbc, 0xce, 0x50, 0x5b, 0xdd,
	0x26, 0xfb, 0x62, 0x1f, 0x6c, 0xc4, 0x97, 0x14, 0xf3, 0x1d, 0xcb, 0x6c, 0xea, 0x2d, 0x22, 0x48,
	0xc8, 0x9f, 0xc3, 0xc5, 0x35, 0x8b, 0xa8, 0x0e, 0xa9, 0x11, 0x6b, 0x4f, 0x6f, 0x90, 0x67, 0x1c,
	0x8d, 0xc9, 0xcf, 0xba, 0xc4, 0x76, 0xd0, 0x07, 0x30, 0x61, 0x73, 0x84, 0x22, 0x16, 0x16, 0x52,
	0x8b, 0xa9, 0xa5, 0xd1, 0x65, 0x74, 0xcd, 0xb0, 0xaf, 0x45, 0xd6, 0xe4, 0xed, 0xd0, 0xb7, 0xfc,
	0x15, 0xcc, 0xc7, 0xd3, 0xb6, 0x3b, 0xa6, 0x61, 0x13, 0xf4, 0x23, 0x48, 0xeb, 0x1a, 0xa3, 0x37,
	0xb6, 0xfa, 0xfe, 0x37, 0x47, 0xa5, 0x81, 0xef, 0x8f, 0x4a, 0x3f, 0x08, 0xa8, 0xb3, 0x65, 0x99,
	0x0d, 0x55, 0xb5, 0xae, 0xb7, 0x4c, 0x4b, 0xa5, 0xa4, 0x89, 0x75, 0x5d, 0xed, 0xe8, 0xd7, 0x9d,
	0xc3, 0x0e, 0xb1, 0xaf, 0xd5, 0xeb, 0xd5, 0xf2, 0xf1, 0x51, 0x29, 0x5d, 0x2d, 0xe3, 0xb4, 0xae,
	0xc9, 0x4d, 0x28, 0x3c, 0x24, 0x4e, 0xbc, 0x12, 0xe7, 0xc9, 0xe7, 0xef, 0x29, 0xb8, 0x10, 0xc3,
	0x48, 0x68, 0xf4, 0x2a, 0xe6, 0x42, 0x3f, 0x04, 0xd4, 0x60, 0xe6, 0xd2, 0x14, 0xd5, 0x51, 0xba,
	0x86, 0x7e, 0xa0, 0x18, 0x76, 0x21, 0xbd, 0x98, 0x5a, 0x1a, 0x5c, 0x9d, 0x3a, 0x3e, 0x2a, 0x4d,
	0x70, 0x63, 0x6a, 0x2b, 0x4e, 0xdd, 0xd0, 0x0f, 0x36, 0x6a, 0x78, 0xa2, 0x11, 0x02, 0xd8, 0x94,
	0x42, 0xb7, 0xa3, 0x45, 0x29, 0x0c, 0xfa, 0x14, 0xea, 0x1c, 0xeb, 0x53, 0xe8, 0x86, 0x00, 0x36,
	0x75, 0x07, 0x3e, 0xa7, 0x0f, 0xee, 0xb0, 0x00, 0xf3, 0xf1, 0xb4, 0xb9, 0xf1, 0x64, 0x1d, 0x2e,
	0x96, 0x49, 0x8b, 0x24, 0xf1, 0x3e, 0xcf, 0x5d, 0x5c, 0x80, 0xf9, 0x78, 0x56, 0x42, 0x14, 0x2f,
	0x2a, 0xb0, 0xd9, 0x75, 0x74, 0x63, 0xfb, 0xa4, 0x19, 0x2c, 0x8e, 0x88, 0x33, 0x43, 0x64, 0x4d,
	0xde, 0x0a, 0x7d, 0xfb, 0x51, 0x11, 0xa5, 0xdd, 0xb7, 0xa8, 0x88, 0x57, 0xa2, 0x0f, 0x51, 0x91,
	0xa0, 0xd1, 0xab, 0x98, 0xeb, 0xcd, 0x8a, 0x8a, 0x3e, 0xb8, 0x83, 0x17, 0x15, 0xf1, 0xc6, 0xf3,
	0xa3, 0xa2, 0xff, 0xbb, 0xe8, 0x45, 0x45, 0x82, 0x28, 0x9f, 0x40, 0x91, 0x1b, 0xbb, 0x4c, 0x62,
	0xe2, 0xf3, 0x3e, 0xe4, 0x35, 0x12, 0x93, 0x1a, 0x26, 0xa9, 0x11, 0xc2, 0x2b, 0xc6, 0xb5, 0xe0,
	0x27, 0x55, 0x31, 0x96, 0x6e, 0x1f, 0x02, 0x82, 0xc0, 0xdc, 0x43, 0xe2, 0xc4, 0xca, 0x7f, 0x9e,
	0x6c, 0xbe, 0x4b, 0xb1, 0xc0, 0x8b, 0xd7, 0xe7, 0xcc, 0x86, 0x7a, 0x23, 0x62, 0xe1, 0x13, 0x28,
	0xf2, 0x39, 0xe7, 0xec, 0x04, 0x97, 0xdc, 0x18, 0x8b, 0x35, 0x9a, 0xbc, 0x03, 0x45, 0xee, 0x9b,
	0x7d, 0xdf, 0xbb, 0x4b, 0x6e, 0xc0, 0xc5, 0x0b, 0xf2, 0xaf, 0x41, 0x18, 0xe6, 0x18, 0xf4, 0x02,
	0xb2, 0x1a, 0xd9, 0x53, 0x48, 0x57, 0x17, 0xac, 0x3f, 0x12, 0xac, 0xdf, 0x7b, 0x59, 0xd6, 0x95,
	0x7a, 0xf5, 0xee, 0xed, 0xe3, 0xa3, 0x12, 0xa5, 0x58, 0xa9, 0x57, 0xf1, 0xb0, 0x46, 0xf6, 0x2a,
	0x5d, 0x1d, 0xd9, 0x30, 0x19, 0x36, 0xa3, 0xa2, 0x6b, 0x6c, 0x9f, 0xc7, 0x56, 0x1f, 0x9e, 0x51,
	0xbd, 0x89, 0x90, 0x3a, 0xd5, 0x32, 0x9e, 0x08, 0xd9, 0xbf, 0xaa, 0xa1, 0x3d, 0x40, 0x91, 0xc3,
	0x9d, 0x72, 0x1d, 0x64, 0x5c, 0x1f, 0x9d, 0x91, 0xab, 0x14, 0x3e, 0x60, 0xab, 0x65, 0x2c, 0x85,
	0xab, 0x02, 0xce, 0x37, 0x92, 0x3e, 0x29, 0xdf, 0xa1, 0x57, 0xe3, 0x1b, 0x4e, 0x61, 0x94, 0x6f,
	0x38, 0xef, 0x56, 0x35, 0xf4, 0x0e, 0x48, 0xf6, 0xae, 0xde, 0x51, 0x9a, 0x4a, 0xc3, 0x70, 0x94,
	0xc6, 0x0e, 0x69, 0xec, 0x16, 0x32, 0x8b, 0xa9, 0xa5, 0x1c, 0x1e, 0xa7, 0xf0, 0xf5, 0x35, 0xc3,
	0x59, 0xa3, 0x40, 0xf9, 0x01, 0x4c, 0x05, 0xf3, 0x93, 0xeb, 0x74, 0x32, 0x0c, 0x73, 0x13, 0x0a,
	0x1f, 0x07, 0xdf, 0xc7, 0xb1, 0xc0, 0xc8, 0xb3, 0x30, 0x1d, 0x5e, 0x2a, 0xbc, 0xa8, 0x05, 0x92,
	0x97, 0x1f, 0x5c, 0x7a, 0x7d, 0x73, 0x27, 0xf9, 0x4f, 0x29, 0x98, 0x0c, 0xb0, 0x13, 0x79, 0xe8,
	0x25, 0xe4, 0x7f, 0x23, 0x32, 0xce, 0x03, 0x98, 0x0a, 0x66, 0x86, 0xff, 0xd2, 0xfc, 0xe1, 0xa5,
	0xc2, 0xfc, 0x26, 0x4c, 0x05, 0x63, 0xbc, 0xff, 0x3b, 0x30, 0x0b, 0xd3, 0x61, 0x86, 0x6e, 0x36,
	0x19, 0x02, 0x89, 0x83, 0x56, 0x1a, 0x8e, 0xbe, 0xa7, 0x3a, 0xba, 0x69, 0xf4, 0x31, 0xaf, 0xfc,
	0x04, 0x72, 0x94, 0xb2, 0xaa, 0x69, 0x96, 0x48, 0x27, 0xab, 0x82, 0xf4, 0xf5, 0x97, 0x25, 0x5d,
	0x26, 0x7b, 0x2b, 0x9a, 0x66, 0x1d, 0x1f, 0x95, 0xb2, 0x62, 0x88, 0xa9, 0xb4, 0x74, 0x80, 0x14,
	0x98, 0xb0, 0x15, 0x63, 0x7f, 0x57, 0xb1, 0x15, 0xdd, 0x70, 0x94, 0x5d, 0x72, 0x28, 0xd2, 0xc7,
	0x03, 0xc1, 0xe5, 0xe6, 0xcb, 0x72, 0x59, 0xa9, 0xd4, 0x6e, 0x2e, 0xdf, 0x7f, 0x4c, 0x0e, 0xf1,
	0xa8, 0xbd, 0xb1, 0xbf, 0x5b, 0xab, 0x1a, 0xce, 0x63, 0x72, 0x48, 0x19, 0x34, 0x23, 0x0c, 0x86,
	0x5e, 0x99, 0x41, 0x33, 0xc0, 0xe0, 0xc7, 0x30, 0xce, 0xc9, 0x13, 0xa3, 0xc1, 0xc8, 0x67, 0x5e,
	0x95, 0x3c, 0x18, 0xfb, 0xbb, 0xb5, 0x8a, 0xd1, 0xa0, 0xd4, 0x0b, 0x90, 0xe3, 0xc9, 0xa6, 0xdb,
	0x29, 0x0c, 0x2f, 0xa6, 0x96, 0xc6, 0xf1, 0x70, 0x73, 0xcd, 0x70, 0xea, 0x1d, 0x54, 0x82, 0x31,
	0x43, 0x24, 0x22, 0xcd, 0xdc, 0x37, 0x0a, 0x59, 0x86, 0x1d, 0x31, 0x68, 0x12, 0x2a, 0x9b, 0xfb,
	0x06, 0x9d, 0xa0, 0x06, 0x27, 0xe4, 0xf8, 0x04, 0xd5, 0x9b, 0x10, 0x97, 0xcd, 0x46, 0xe2, 0xb2,
	0xd9, 0xe7, 0x30, 0x23, 0x7c, 0x2d, 0xe2, 0xfd, 0x2b, 0xde, 0xa1, 0xa3, 0x7a, 0xbe, 0x28, 0x62,
	0x6b, 0xda, 0x8f, 0x2d, 0xdf, 0x4f, 0xb1, 0xa4, 0x45, 0x20, 0x72, 0x01, 0x66, 0xa3, 0xb4, 0x85,
	0xa3, 0xdb, 0x30, 0x57, 0x26, 0x6a, 0x2c, 0xdf, 0xfe, 0x45, 0x5d, 0x11, 0x0a, 0x27, 0x99, 0x0a,
	0x81, 0xf6, 0xa0, 0xe8, 0xa5, 0xc4, 0x80, 0x4e, 0x7d, 0x97, 0xe9, 0x4b, 0xb8, 0x18, 0xcb, 0x57,
	0x24, 0xe5, 0x73, 0xd8, 0x84, 0x0b, 0xac, 0xc6, 0xc5, 0xaa, 0xa1, 0x99, 0x6d, 0x37, 0x44, 0xb9,
	0x5a, 0xb2, 0xc1, 0xef, 0x83, 0x61, 0x94, 0xe0, 0x8c, 0x03, 0xb9, 0x81, 0xeb, 0x7c, 0xef, 0x8c,
	0xb9, 0xc1, 0x4b, 0x08, 0xf2, 0xef, 0x53, 0xb0, 0xc8, 0x4f, 0x88, 0xa7, 0x2b, 0x6b, 0x6b, 0x66,
	0xbb, 0xad, 0x1a, 0xda, 0xc7, 0x5d, 0xd2, 0x25, 0x55, 0x87, 0xb4, 0xfb, 0x6e, 0x6b, 0x24, 0xc1,
	0x60, 0x43, 0x94, 0x12, 0xe3, 0x98, 0x0e, 0x51, 0x11, 0x72, 0x0d, 0x2e, 0x86, 0x5d, 0xc8, 0x2c,
	0x0e, 0x2e, 0x8d, 0x61, 0xef, 0x5b, 0xbe, 0x02, 0x97, 0x7b, 0xc8, 0x2a, 0xdc, 0xe6, 0xfb, 0x14,
	0x5c, 0xaa, 0x11, 0x43, 0x7b, 0x66, 0x99, 0x1d, 0x4b, 0x27, 0x8e, 0x6a, 0x1d, 0x3e, 0x53, 0x0f,
	0x5b, 0xa6, 0xaa, 0xb9, 0xea, 0x94, 0x60, 0xb4, 0xad, 0x36, 0x94, 0x0e, 0x87, 0x72, 0x95, 0x30,
	0xb4, 0xd5, 0x86, 0x98, 0x47, 0xa5, 0x6a, 0xeb, 0x0d, 0x9e, 0x7f, 0x31, 0x1d, 0xa2, 0xcb, 0x30,
	0xb6, 0xad, 0x3a, 0x64, 0x5f, 0x3d, 0x54, 0xda, 0x6a, 0x83, 0x9e, 0x8e, 0x54, 0xb2, 0x51, 0x01,
	0x7b, 0xaa, 0x36, 0x6c, 0x74, 0x07, 0x66, 0x3b, 0x66, 0x4b, 0xb5, 0xf4, 0x9f, 0xb3, 0x4d, 0x56,
	0x74, 0x63, 0x8f, 0x58, 0x36, 0x75, 0x8e, 0x21, 0x16, 0xe4, 0x33, 0x41, 0x6c, 0xd5, 0x45, 0xa2,
	0x79, 0x18, 0x69, 0x5a, 0x54, 0x30, 0xa3, 0xc1, 0x73, 0xd9, 0x38, 0xf6, 0x01, 0x28, 0x0f, 0x69,
	0xcd, 0x12, 0x99, 0x28, 0xad, 0x59, 0xf2, 0x22, 0x2c, 0x24, 0xe9, 0x26, 0xd4, 0xff, 0x36, 0x0d,
	0xd9, 0x87, 0x5c, 0x2c, 0xf4, 0x38, 0x50, 0x74, 0x7f, 0x70, 0xd6, 0x2d, 0x13, 0x55, 0x37, 0x42,
	0x30, 0x64, 0xa8, 0x6d, 0xc2, 0xac, 0x32, 0x82, 0xd9, 0x18, 0x2d, 0xc2, 0xa8, 0x46, 0xec, 0x86,
	0xa5, 0x77, 0x58, 0x14, 0x0c, 0x32, 0x54, 0x10, 0x44, 0xb7, 0xb3, 0xa5, 0x3a, 0xba, 0xd3, 0xd5,
	0x08, 0xb3, 0x43, 0x0a, 0x7b, 0xdf, 0x54, 0xf5, 0x96, 0x69, 0x6c, 0x73, 0x64, 0x86, 0x21, 0x7d,
	0x00, 0x5d, 0xa9, 0xb6, 0xc4, 0xca, 0x61, 0xbe, 0xd2, 0xfd, 0x46, 0x16, 0x20, 0x77, 0x3b, 0x02,
	0x05, 0x69, 0x96, 0x29, 0x5a, 0x3e, 0x4b, 0x31, 0x2a, 0x2c, 0x16, 0x28, 0x46, 0xb7, 0xc3, 0x10,
	0x4d, 0xfe, 0xd0, 0x2d, 0x14, 0xc5, 0x5c, 0xd7, 0x9b, 0xde, 0x86, 0xac, 0x98, 0x2b, 0xb2, 0xc0,
	0x28, 0xcd, 0x02, 0xee, 0x24, 0x17, 0x27, 0xcf, 0xc1, 0x4c, 0x64, 0xb9, 0xd8, 0xb0, 0x2f, 0x59,
	0xe5, 0x17, 0x21, 0x7a, 0x9e, 0x3b, 0x27, 0xff, 0x25, 0x0d, 0x28, 0xc8, 0x42, 0xa4, 0x93, 0x97,
	0x13, 0xfc, 0x4d, 0x28, 0x30, 0xd1, 0x43, 0x98, 0x69, 0xea, 0x96, 0xed, 0x28, 0x36, 0x21, 0x46,
	0x90, 0xc8, 0x10, 0x23, 0x32, 0x73, 0x7c, 0x54, 0x9a, 0x5c, 0xa7, 0x13, 0x6a, 0x84, 0x18, 0x1e,
	0x99, 0xc9, 0x66, 0x04, 0x64, 0xa3, 0x32, 0x4c, 0xb7, 0xd4, 0x18, 0x3a, 0x19, 0x46, 0x67, 0x9a,
	0xba, 0xc2, 0x13, 0x35, 0x42, 0x46, 0x6a, 0x85, 0x21, 0x36, 0x75, 0x05, 0x2e, 0xf2, 0x99, 0x5d,
	0x21, 0xb2, 0x5c, 0xb8, 0x42, 0xc3, 0xad, 0x41, 0xfb, 0xe9, 0x0d, 0x73, 0x30, 0x13, 0x61, 0x22,
	0xb8, 0xff, 0x33, 0x0d, 0x63, 0x02, 0x56, 0x73, 0x54, 0xc7, 0x46, 0x1f, 0xc1, 0xa4, 0xa3, 0xb7,
	0x89, 0xed, 0xa8, 0xed, 0x8e, 0x67, 0xa9, 0x94, 0xbf, 0x6d, 0xcf, 0x5d, 0xa4, 0xbb, 0x6d, 0x4e,
	0x08, 0x60, 0xa3, 0x0a, 0x4c, 0x59, 0x07, 0x4a, 0x47, 0x6d, 0xec, 0x12, 0xc7, 0x56, 0x2c, 0xd2,
	0x20, 0xfa, 0x1e, 0xe1, 0xd7, 0xe4, 0x0c, 0xdf, 0x34, 0xfc, 0xe2, 0x19, 0xc7, 0x62, 0x81, 0xc4,
	0x93, 0xd6, 0x41, 0x04, 0x84, 0x9e, 0xc0, 0x6c, 0x0c, 0x19, 0xc5, 0xdc, 0x65, 0x3e, 0x94, 0x59,
	0x9d, 0x3b, 0x3e, 0x2a, 0x4d, 0x9d, 0xa0, 0xb4, 0xf9, 0x18, 0x4f, 0x9d, 0xa0, 0xb5, 0xb9, 0x4b,
	0x85, 0x72, 0x62, 0x84, 0x1a, 0xf2, 0x85, 0x7a, 0x7e, 0x52, 0x28, 0xe7, 0x84, 0x50, 0xab, 0x80,
	0x02, 0x64, 0x48, 0x5b, 0x77, 0x1c, 0xa2, 0x31, 0x3f, 0xca, 0x70, 0x3f, 0xf2, 0xa8, 0x54, 0x38,
	0x0e, 0x4b, 0x1e, 0x11, 0x01, 0x91, 0xff, 0x98, 0x86, 0x59, 0x3f, 0x30, 0x99, 0xd1, 0xfb, 0xb1,
	0xe5, 0xe8, 0x16, 0xe4, 0x74, 0xc3, 0x21, 0xd6, 0x9e, 0xda, 0x62, 0xc6, 0xcf, 0x2f, 0xcf, 0x51,
	0xc7, 0x5c, 0xd9, 0xde, 0xb6, 0xc8, 0xb6, 0x38, 0x8f, 0x38, 0x1a, 0x7b, 0x13, 0xd1, 0x26, 0xcc,
	0xd9, 0x8e, 0x6a, 0x39, 0xca, 0x49, 0x1f, 0xe0, 0xa1, 0x5b, 0x38, 0x3e, 0x2a, 0x4d, 0xd7, 0xe8,
	0x94, 0xa8, 0x23, 0x4c, 0xdb, 0x27, 0xa1, 0x36, 0xaa, 0xc2, 0x0c, 0x31, 0xb4, 0x18, 0x72, 0x3c,
	0x88, 0x67, 0x8f, 0x8f, 0x4a, 0xa8, 0x62, 0x68, 0x51, 0x62, 0x88, 0x44, 0x61, 0xb6, 0xbc, 0xc6,
	0x0a, 0xa8, 0xb0, 0xdd, 0x44, 0x56, 0x5b, 0x82, 0x61, 0x8b, 0xd8, 0xdd, 0x96, 0x53, 0x48, 0x2d,
	0x0e, 0x2e, 0x8d, 0x2e, 0x4b, 0x81, 0x10, 0xe4, 0x33, 0x05, 0x5e, 0xfe, 0x36, 0x05, 0xe2, 0xc9,
	0xc5, 0x2b, 0x22, 0xfa, 0x58, 0xe9, 0x94, 0x60, 0xb4, 0x69, 0xb5, 0xbd, 0xa2, 0x83, 0xd7, 0x16,
	0xd0, 0xb4, 0xda, 0x6e, 0xd1, 0x31, 0x05, 0x19, 0x76, 0x33, 0x60, 0xd6, 0x1d, 0xc7, 0x43, 0xf4,
	0xde, 0x81, 0x66, 0x60, 0xb8, 0xa9, 0x74, 0x4c, 0xcb, 0x11, 0x25, 0x52, 0xa6, 0xf9, 0xcc, 0xb4,
	0x1c, 0x7a, 0x72, 0x36, 0x4c, 0xa3, 0xa9, 0x5b, 0x6d, 0xe1, 0x73, 0x39, 0xec, 0x03, 0xe4, 0x87,
	0xee, 0xef, 0x17, 0x11, 0xed, 0x5c, 0xdf, 0x7a, 0x07, 0x86, 0x74, 0x87, 0xb4, 0x45, 0x8e, 0x9a,
	0xf2, 0x8b, 0x56, 0x7f, 0x26, 0x9b, 0x20, 0x97, 0xe0, 0x52, 0x02, 0x21, 0x91, 0x32, 0xbe, 0x86,
	0xc5, 0xf5, 0x56, 0xd7, 0xde, 0x09, 0xe0, 0xd7, 0x4d, 0x4b, 0x68, 0xde, 0xf7, 0x42, 0xfd, 0x0a,
	0x5c, 0xee, 0xc1, 0x5d, 0x88, 0xf8, 0x4b, 0xb8, 0xe2, 0x55, 0xf3, 0x9e, 0x02, 0xf6, 0x6b, 0x94,
	0xf2, 0x63, 0x78, 0xab, 0xb7, 0x00, 0xc2, 0x71, 0xdf, 0x85, 0x0c, 0x35, 0xba, 0x2d, 0xfc, 0x36,
	0x76, 0x5b, 0xf8, 0x0c, 0xa1, 0xd3, 0x06, 0x39, 0x60, 0x17, 0xcb, 0x96, 0x6e, 0xec, 0xd2, 0xcb,
	0xe3, 0x6b, 0xd4, 0xe9, 0x03, 0xa6, 0x53, 0x0f, 0x01, 0x84, 0x4e, 0x9e, 0x4f, 0xa7, 0x7c, 0x9f,
	0x96, 0x7f, 0x95, 0x82, 0xc5, 0x9a, 0x63, 0x11, 0xb5, 0xbd, 0x6e, 0xa9, 0x6d, 0xf2, 0xc4, 0xdc,
	0xa6, 0xd6, 0x88, 0x1c, 0x79, 0x5f, 0xc2, 0x88, 0x80, 0x54, 0xcb, 0x42, 0xfa, 0xd5, 0xb3, 0x4a,
	0xef, 0x53, 0xc2, 0xfe, 0x50, 0xfe, 0x5d, 0x0a, 0x2e, 0xf7, 0x10, 0x43, 0x68, 0x70, 0x0f, 0xc6,
	0xbb, 0x1d, 0xaa, 0xa0, 0xd2, 0xa4, 0xb3, 0xdc, 0xdd, 0x61, 0xbf, 0x1b, 0xd5, 0x19, 0xc2, 0x5d,
	0x8d, 0xc7, 0xba, 0xfe, 0xb7, 0x8d, 0x3e, 0x84, 0x09, 0x4d, 0xd8, 0xc6, 0x5d, 0x9a, 0x66, 0x4b,
	0xf9, 0x25, 0xd1, 0x35, 0x9b, 0xbb, 0x38, 0xaf, 0x05, 0x21, 0xb6, 0xfc, 0x0b, 0x28, 0x9d, 0x14,
	0xee, 0x75, 0xdd, 0xca, 0x7f, 0x1b, 0xbb, 0x43, 0x91, 0xc7, 0xc9, 0xff, 0x95, 0x65, 0x7e, 0x93,
	0x82, 0x5c, 0x59, 0x75, 0x54, 0xac, 0x3a, 0x04, 0x2d, 0x00, 0xb4, 0x4d, 0xad, 0xdb, 0xf2, 0x6f,
	0xe1, 0x23, 0x38, 0x00, 0xa1, 0x89, 0x72, 0x4b, 0x35, 0xb4, 0x7d, 0x5d, 0x73, 0x76, 0x58, 0xce,
	0x1d, 0xc7, 0x3e, 0x00, 0xbd, 0x0b, 0x92, 0xdd, 0xb1, 0x88, 0xaa, 0xe9, 0xc6, 0xb6, 0xd2, 0x54,
	0x1b, 0x8e, 0x69, 0x89, 0xec, 0x3b, 0xe1, 0xc1, 0xd7, 0x19, 0x18, 0x15, 0x20, 0xbb, 0xa5, 0x3b,
	0x96, 0xea, 0x10, 0x91, 0x89, 0xdd, 0x4f, 0xd9, 0x81, 0x31, 0xae, 0xee, 0xf3, 0x17, 0x55, 0xa3,
	0x69, 0x86, 0x2f, 0x74, 0xa9, 0xe8, 0x85, 0xee, 0x5d, 0x18, 0xd1, 0x54, 0x47, 0x55, 0x18, 0xa5,
	0x34, 0x4b, 0xc0, 0x63, 0x4c, 0x6d, 0xa1, 0x11, 0xce, 0x69, 0xae, 0x6e, 0x17, 0x69, 0x92, 0xd7,
	0x08, 0x9f, 0xca, 0xaf, 0x56, 0x39, 0x0a, 0xa0, 0x48, 0xf9, 0xdf, 0x69, 0x97, 0x2d, 0xe6, 0x6c,
	0x55, 0x00, 0xf7, 0x4a, 0xe4, 0x15, 0x0e, 0xe7, 0x12, 0x31, 0x82, 0x6a, 0x55, 0x43, 0x37, 0x60,
	0x8c, 0x1e, 0xde, 0x91, 0x3b, 0x40, 0xfe, 0xf8, 0xa8, 0x04, 0xf4, 0x80, 0x16, 0xe7, 0x35, 0x38,
	0xee, 0x98, 0x55, 0xfe, 0x86, 0xad, 0xd8, 0xba, 0xd1, 0x20, 0xca, 0x76, 0xc7, 0x56, 0x48, 0xc7,
	0x6c, 0xec, 0x04, 0x2b, 0xff, 0x8d, 0x5a, 0x8d, 0x22, 0x1f, 0x3e, 0xab, 0x55, 0x28, 0x0a, 0x4f,
	0x18, 0x36, 0x07, 0x74, 0x6c, 0x06, 0xa0, 0xd6, 0xf4, 0x0a, 0x06, 0x61, 0x79, 0x1f, 0x80, 0xe6,
	0x61, 0xc8, 0xb2, 0x6d, 0x5d, 0x94, 0x5d, 0xb9, 0xe3, 0xa3, 0xd2, 0x10, 0xae, 0xd5, 0xaa, 0x98,
	0x41, 0xd1, 0xff, 0x41, 0x8e, 0x6a, 0xa9, 0xd8, 0x06, 0xbf, 0x42, 0xa7, 0x57, 0x47, 0x8f, 0x8f,
	0x4a, 0xd9, 0x27, 0x26, 0x56, 0x6b, 0x1b, 0x18, 0x67, 0x29, 0xb2, 0x66, 0x58, 0x68, 0x1a, 0x32,
	0x5b, 0xa6, 0x6a, 0x69, 0xe2, 0x4d, 0x8f, 0x7f, 0xd0, 0x1d, 0x57, 0x0d, 0x87, 0x18, 0x86, 0x2a,
	0x9e, 0xf2, 0xdc, 0x4f, 0xf9, 0x0f, 0x29, 0xc8, 0x87, 0x3d, 0x1c, 0xdd, 0x81, 0xac, 0x73, 0xa0,
	0xe8, 0x46, 0xd3, 0x14, 0xa7, 0xaa, 0xe4, 0x87, 0x01, 0xf7, 0x8b, 0x55, 0xa0, 0x81, 0xc6, 0xc7,
	0x78, 0xd8, 0x39, 0x60, 0x9b, 0x76, 0x07, 0xb2, 0x96, 0x58, 0x96, 0xf6, 0xab, 0x95, 0xe0, 0xbe,
	0xf2, 0x65, 0x58, 0x2c, 0xb3, 0xf8, 0xb2, 0xeb, 0x30, 0xda, 0xd9, 0x39, 0xf4, 0x6a, 0x09, 0xfe,
	0x82, 0xcb, 0xf6, 0xe1, 0xd9, 0xa3, 0xcf, 0xdc, 0x07, 0x01, 0xe8, 0xec, 0xb8, 0x8f, 0x03, 0xf2,
	0x77, 0x83, 0x90, 0x77, 0x03, 0xeb, 0xf9, 0x6b, 0xf3, 0x97, 0x45, 0x18, 0xd5, 0xdb, 0x6d, 0xa2,
	0xe9, 0xaa, 0x43, 0x5a, 0x87, 0xcc, 0x5d, 0x72, 0x38, 0x08, 0x7a, 0x0d, 0xfe, 0xd1, 0xeb, 0x71,
	0x65, 0x1a, 0x32, 0x1d, 0x73, 0x9f, 0x70, 0xe7, 0xc8, 0x60, 0xfe, 0x11, 0x8e, 0xd0, 0xec, 0xcb,
	0x47, 0x68, 0x2e, 0x1c, 0xa1, 0x3d, 0xde, 0x83, 0x46, 0x7a, 0xbd, 0x07, 0x79, 0xce, 0x08, 0x09,
	0xce, 0x38, 0x1a, 0x76, 0xc6, 0xaf, 0x41, 0x8a, 0xa6, 0x4c, 0x74, 0x2f, 0xea, 0x8d, 0x28, 0x98,
	0x59, 0x7b, 0xf8, 0x63, 0xc4, 0xb1, 0xd2, 0xa7, 0x3a, 0xd6, 0x14, 0x7b, 0xbc, 0xf8, 0x84, 0xcb,
	0xee, 0xbe, 0x61, 0x62, 0xf6, 0xdc, 0xe0, 0x01, 0xc5, 0x79, 0x51, 0x80, 0xac, 0x6b, 0x00, 0x9e,
	0xa7, 0xdd, 0x4f, 0x24, 0xd3, 0x92, 0x7d, 0x9b, 0x22, 0xf8, 0xe5, 0x84, 0xfd, 0x4e, 0x84, 0x19,
	0x04, 0x0b, 0x8c, 0xfc, 0xe7, 0x14, 0xe4, 0xc3, 0x8f, 0x34, 0xe7, 0xf9, 0x93, 0x32, 0x7b, 0x75,
	0xdc, 0x51, 0x0d, 0x83, 0xb4, 0xf8, 0x61, 0x34, 0x8e, 0xbd, 0x6f, 0x54, 0x81, 0x3c, 0x39, 0x70,
	0x2c, 0x55, 0xf1, 0x66, 0x0c, 0xb2, 0x58, 0x5d, 0x08, 0xdc, 0x2c, 0x84, 0x4c, 0x15, 0x3a, 0x6f,
	0x8d, 0x4f, 0xc3, 0xe3, 0x24, 0xf0, 0x65, 0xcb, 0x7f, 0x4d, 0x41, 0x31, 0x79, 0x36, 0xba, 0x76,
	0xe2, 0x24, 0xcb, 0x2f, 0xe7, 0x29, 0x87, 0xa7, 0x1e, 0x34, 0x7a, 0xb2, 0xf9, 0xae, 0x9d, 0x8e,
	0xba, 0x76, 0xe8, 0xdc, 0x1b, 0x8c, 0x9e, 0x7b, 0x89, 0x87, 0x19, 0xfa, 0x7f, 0x98, 0x8c, 0x9e,
	0x88, 0xfc, 0x19, 0x76, 0x1c, 0x4b, 0x91, 0x23, 0xd1, 0xf6, 0x7b, 0xb0, 0xc2, 0x6a, 0x05, 0x9a,
	0x6e, 0x22, 0x8f, 0x74, 0x41, 0x6f, 0x8c, 0xac, 0xc9, 0x87, 0xdf, 0xdb, 0xfc, 0x1e, 0xac, 0x28,
	0xed, 0xbe, 0xf5, 0x60, 0xc5, 0x2b, 0xd1, 0x87, 0x1e, 0xac, 0x04, 0x8d, 0x5e, 0xc5, 0x5c, 0x6f,
	0x56, 0x0f, 0x56, 0x1f, 0xdc, 0xc1, 0xeb, 0xc1, 0x8a, 0x37, 0x9e, 0xdf, 0x83, 0xd5, 0xff, 0x5d,
	0xf4, 0x7a, 0xb0, 0xe2, 0x45, 0xb9, 0x3a, 0x0f, 0x39, 0xfc, 0xe2, 0x53, 0xdd, 0xd0, 0xcc, 0x7d,
	0x94, 0x85, 0x41, 0xfc, 0xe2, 0xa6, 0x34, 0xc0, 0x07, 0xcb, 0x52, 0xea, 0x6a, 0x09, 0xc0, 0x0f,
	0x68, 0x94, 0x83, 0xa1, 0x27, 0x9b, 0x78, 0x85, 0x4f, 0x58, 0xaf, 0x3d, 0x96, 0x52, 0x57, 0xf7,
	0x60, 0x98, 0xa7, 0x3e, 0x34, 0x02, 0x99, 0x4a, 0xfd, 0xfe, 0xdd, 0xfb, 0xd2, 0x00, 0x1d, 0xd6,
	0x6b, 0x0f, 0x6e, 0xde, 0x91, 0xd2, 0x74, 0xb8, 0xb6, 0x71, 0xef, 0xde, 0x03, 0x69, 0x90, 0x4f,
	0xb8, 0x7d, 0xeb, 0x96, 0x34, 0x44, 0x87, 0x2b, 0x75, 0x3a, 0x21, 0xc3, 0x27, 0xdc, 0xbe, 0x77,
	0x43, 0x1a, 0x66, 0xd0, 0xda, 0x83, 0xe5, 0x5b, 0x52, 0x96, 0x0e, 0x1f, 0xe3, 0x07, 0xcb, 0x37,
	0xa4, 0x1c, 0x1d, 0x56, 0x37, 0xee, 0xdf, 0xbd, 0x23, 0x8d, 0xd0, 0x21, 0xae, 0xdf, 0xbf, 0x7b,
	0x5b, 0x82, 0xab, 0x2d, 0x98, 0x8a, 0x79, 0x0f, 0x42, 0x00, 0xc3, 0xb5, 0xca, 0xda, 0xe6, 0x46,
	0x59, 0x1a, 0xa0, 0xe3, 0xa7, 0xd5, 0x8d, 0xfa, 0xf3, 0x8a, 0x94, 0xa2, 0x92, 0x3f, 0xda, 0xac,
	0x63, 0x29, 0x4d, 0x25, 0x2f, 0xaf, 0x7c, 0x26, 0x0d, 0x52, 0xd0, 0xa7, 0x95, 0xca, 0x63, 0x2e,
	0xcd, 0xd3, 0xcd, 0x8d, 0xe7, 0x8f, 0xa4, 0x0c, 0x1a, 0x85, 0xec, 0xc7, 0xf5, 0x15, 0xfc, 0xbc,
	0x82, 0xa5, 0x61, 0x3a, 0xe3, 0xb3, 0xca, 0x0a, 0x96, 0xb2, 0xcb, 0xbf, 0x2e, 0xc2, 0xf4, 0x06,
	0x71, 0xf6, 0x4d, 0x6b, 0xb7, 0xc6, 0xec, 0x2d, 0xba, 0x50, 0xd0, 0x17, 0xee, 0x2b, 0x7b, 0xb8,
	0x2d, 0x05, 0x95, 0xa8, 0x93, 0xf4, 0xe8, 0x83, 0x2e, 0x2e, 0x26, 0x4f, 0x10, 0x3e, 0x32, 0x80,
	0x30, 0x3b, 0xad, 0x22, 0x94, 0xe7, 0x99, 0xfb, 0x25, 0x74, 0x26, 0x17, 0x2f, 0x25, 0x60, 0x3d,
	0x9a, 0x5f, 0xb8, 0x6f, 0xc1, 0x71, 0x02, 0xf7, 0xe8, 0xd4, 0xe5, 0x02, 0xf7, 0x6c, 0xb7, 0x65,
	0xc4, 0xe3, 0xba, 0x60, 0x39, 0xf1, 0x1e, 0xad, 0xb8, 0x9c, 0x78, 0xcf, 0x06, 0xda, 0x01, 0xdf,
	0xd4, 0xe1, 0x4e, 0x9c, 0xa0, 0xa9, 0x63, 0x3b, 0x1a, 0x83, 0xa6, 0x4e, 0xe8, 0x43, 0x74, 0x4d,
	0x1d, 0xa1, 0xec, 0x9a, 0x3a, 0x9e, 0xec, 0xa5, 0x04, 0xec, 0x49, 0x53, 0xc7, 0x09, 0xdc, 0xa3,
	0xfd, 0x33, 0x68, 0xea, 0x5e, 0xc4, 0xe3, 0x5a, 0x2b, 0x83, 0xa6, 0xee, 0x41, 0xbc, 0x67, 0x57,
	0xe6, 0x00, 0x7a, 0x11, 0xee, 0x4f, 0x72, 0x69, 0x2f, 0xf8, 0x86, 0x8c, 0x6b, 0x9a, 0x2b, 0x96,
	0x12, 0xf1, 0x1e, 0xe5, 0xcd, 0x40, 0x9b, 0x92, 0x4b, 0xf6, 0xa2, 0x30, 0x64, 0x2c, 0xcd, 0xf9,
	0x78, 0x64, 0x50, 0xd4, 0x98, 0x2e, 0x3f, 0x2e, 0x6a, 0x72, 0x5b, 0x61, 0xb1, 0x94, 0x88, 0x0f,
	0x52, 0x8e, 0x69, 0xdb, 0xe3, 0x94, 0x93, 0x3b, 0x07, 0x8b, 0xa5, 0x44, 0xbc, 0x47, 0x79, 0x0d,
	0xc6, 0x82, 0x56, 0x42, 0x73, 0x51, 0xbb, 0xb9, 0xb4, 0x0a, 0x27, 0x11, 0x1e, 0x91, 0xf7, 0x61,
	0xc4, 0x33, 0x0b, 0x9a, 0x0e, 0x59, 0xc9, 0x5d, 0x3e, 0x13, 0x81, 0x06, 0x05, 0x08, 0xea, 0xce,
	0x05, 0x88, 0x69, 0x89, 0xe2, 0x02, 0xc4, 0x36, 0x3c, 0x31, 0x22, 0x41, 0x35, 0x39, 0x91, 0x98,
	0x26, 0x28, 0x4e, 0x24, 0xb6, 0x59, 0x69, 0x00, 0x55, 0x21, 0x1f, 0xee, 0xef, 0x40, 0x17, 0xd8,
	0x53, 0x7f, 0x5c, 0x5f, 0x47, 0xb1, 0x18, 0x87, 0x0a, 0xba, 0x56, 0xb4, 0x37, 0x83, 0xbb, 0x56,
	0x42, 0x9b, 0x08, 0x77, 0xad, 0xc4, 0x76, 0x0e, 0xe6, 0x00, 0x31, 0x8d, 0x15, 0xdc, 0x01, 0x92,
	0x3b, 0x3d, 0xb8, 0x03, 0xf4, 0xe8, 0xc8, 0x90, 0x07, 0xd0, 0x4f, 0xdd, 0x1f, 0x57, 0xa3, 0xef,
	0xf9, 0x8b, 0xd1, 0x0d, 0x8f, 0x3e, 0x86, 0x17, 0x2f, 0xf7, 0x98, 0xe1, 0xd1, 0xff, 0x0a, 0x2e,
	0x24, 0xbe, 0x34, 0xa3, 0xb7, 0x28, 0x85, 0xd3, 0x9e, 0xc1, 0x8b, 0x6f, 0x9f, 0x32, 0xcb, 0xe3,
	0x65, 0xc3, 0x7c, 0xaf, 0xf7, 0x62, 0xf4, 0x4e, 0xc8, 0x1c, 0xc9, 0x4f, 0xda, 0xc5, 0xa5, 0xd3,
	0x27, 0x46, 0x98, 0x26, 0x3e, 0xe8, 0x7a, 0x4c, 0x4f, 0x7b, 0x73, 0xf6, 0x98, 0x9e, 0xfa, 0x36,
	0xec, 0xe5, 0xae, 0x50, 0xaf, 0x8b, 0x97, 0xbb, 0xe2, 0x9a, 0x63, 0xbc, 0xdc, 0x15, 0xdb, 0x1e,
	0xc3, 0xb7, 0x29, 0xb1, 0x3f, 0x84, 0x6f, 0xd3, 0x69, 0xad, 0x2e, 0x7c, 0x9b, 0x4e, 0x6f, 0x32,
	0x19, 0x40, 0x2a, 0xcc, 0xc6, 0x77, 0x62, 0xa0, 0xcb, 0xfc, 0x9f, 0x36, 0x3d, 0x3a, 0x50, 0x8a,
	0x72, 0xaf, 0x29, 0x1e, 0x8b, 0x75, 0x18, 0x0f, 0xdd, 0x81, 0x50, 0x20, 0x7d, 0x85, 0x9f, 0xcb,
	0x8b, 0x17, 0x62, 0x30, 0x1e, 0x9d, 0x0f, 0x01, 0xfc, 0x6b, 0x07, 0x72, 0x93, 0x58, 0x84, 0xc2,
	0x6c, 0x14, 0x1c, 0x14, 0x23, 0x54, 0x7b, 0xa3, 0x40, 0x12, 0x8b, 0x13, 0x23, 0xfe, 0xb7, 0x6d,
	0x46, 0x27, 0x54, 0x38, 0xa3, 0x40, 0x1e, 0x8b, 0xa3, 0x13, 0xff, 0x2b, 0x75, 0xa0, 0x6e, 0x89,
	0xbc, 0x07, 0x94, 0x4e, 0xd8, 0x20, 0xb9, 0x6e, 0x49, 0xb8, 0x46, 0xb8, 0x75, 0x4b, 0x84, 0xf2,
	0x7c, 0xd8, 0x36, 0x09, 0x75, 0x4b, 0x22, 0xcd, 0x2f, 0x22, 0xed, 0x02, 0x31, 0x75, 0x4b, 0x0f,
	0x81, 0x7b, 0xde, 0x7b, 0x02, 0x75, 0x4b, 0x1c, 0xf1, 0x1e, 0x77, 0xa2, 0x60, 0xdd, 0x92, 0x48,
	0xfc, 0x09, 0x4c, 0x44, 0x7e, 0x67, 0x45, 0xc5, 0xb0, 0xb6, 0xc1, 0x1f, 0xad, 0x8b, 0x17, 0x63,
	0x71, 0x1e, 0xb5, 0x16, 0x5c, 0x48, 0xfc, 0xc1, 0x85, 0x87, 0xe7, 0x69, 0x3f, 0x0b, 0xf1, 0xf0,
	0x3c, 0xf5, 0x57, 0x1b, 0x79, 0xe0, 0x46, 0x0a, 0xe9, 0x50, 0x48, 0xfa, 0x0d, 0x03, 0x5d, 0x89,
	0x27, 0x13, 0x3e, 0xce, 0xde, 0xea, 0x3d, 0x29, 0xc0, 0x8a, 0x07, 0x98, 0x78, 0xf0, 0xf2, 0x02,
	0x2c, 0xfc, 0x2a, 0xe6, 0x05, 0x58, 0xe4, 0x5d, 0x4c, 0x1e, 0x58, 0x1d, 0xfb, 0xe6, 0x78, 0x21,
	0xf5, 0xb7, 0xe3, 0x85, 0xd4, 0x3f, 0x8e, 0x17, 0x52, 0x5b, 0xc3, 0xec, 0x6f, 0x9f, 0xb7, 0xfe,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x71, 0x2e, 0x51, 0x45, 0x3a, 0x00, 0x00,
}
